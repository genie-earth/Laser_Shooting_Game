
LCD328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000ffe  00001092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800172  00800172  00001104  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b2  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  0000228e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075b  00000000  00000000  00002aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_1>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__addsf3+0x12>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ee ef       	ldi	r30, 0xFE	; 254
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a2 37       	cpi	r26, 0x72	; 114
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a2 e7       	ldi	r26, 0x72	; 114
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	ab 38       	cpi	r26, 0x8B	; 139
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 42 01 	call	0x284	; 0x284 <main>
 120:	0c 94 fd 07 	jmp	0xffa	; 0xffa <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <LCD_pulse_enable>:

uint8_t MODE = 4;

void LCD_pulse_enable(void) 		// 하강 에지에서 동작
{
	PORT_CONTROL |= (1 << E_PIN);	// E를 HIGH로
 128:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_pulse_enable+0x4>
 130:	00 00       	nop
	_delay_us(1);
	PORT_CONTROL &= ~(1 << E_PIN);	// E를 LOW로
 132:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_pulse_enable+0x10>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_pulse_enable+0x16>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
	PORT_CONTROL |= (1 << RS_PIN);	// 문자 출력에서 RS는 1
 146:	40 9a       	sbi	0x08, 0	; 8
	
	if(MODE == 8){
 148:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <MODE>
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	21 f4       	brne	.+8      	; 0x158 <LCD_write_data+0x16>
		PORT_DATA = data;			// 출력할 문자 데이터
 150:	cb b9       	out	0x0b, r28	; 11
		LCD_pulse_enable();
 152:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
 156:	0c c0       	rjmp	.+24     	; 0x170 <LCD_write_data+0x2e>
	}
	else
	{
		PORT_DATA = data & 0xF0;		// 상위 4비트
 158:	8c 2f       	mov	r24, r28
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 15e:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
		PORT_DATA = (data << 4) & 0xF0;	// 하위 4비트
 162:	20 e1       	ldi	r18, 0x10	; 16
 164:	c2 9f       	mul	r28, r18
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 16c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9f e1       	ldi	r25, 0x1F	; 31
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_write_data+0x32>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_write_data+0x38>
 17a:	00 00       	nop
	}
	_delay_ms(2);
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
	PORT_CONTROL &= ~(1 << RS_PIN);	// 명령어 실행에서 RS는 0
 184:	40 98       	cbi	0x08, 0	; 8
	
	if(MODE == 8){
 186:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <MODE>
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	21 f4       	brne	.+8      	; 0x196 <LCD_write_command+0x16>
		PORT_DATA = command;		// 데이터 핀에 명령어 전달
 18e:	cb b9       	out	0x0b, r28	; 11
		LCD_pulse_enable();			// 명령어 실행
 190:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
 194:	0c c0       	rjmp	.+24     	; 0x1ae <LCD_write_command+0x2e>
	}
	else{
		PORT_DATA = command & 0xF0;		// 상위 4비트
 196:	8c 2f       	mov	r24, r28
 198:	80 7f       	andi	r24, 0xF0	; 240
 19a:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 19c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
		PORT_DATA = (command << 4) & 0xF0;	// 하위 4비트
 1a0:	20 e1       	ldi	r18, 0x10	; 16
 1a2:	c2 9f       	mul	r28, r18
 1a4:	c0 01       	movw	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8b b9       	out	0x0b, r24	; 11
		LCD_pulse_enable();
 1aa:	0e 94 94 00 	call	0x128	; 0x128 <LCD_pulse_enable>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9f e1       	ldi	r25, 0x1F	; 31
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_write_command+0x32>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_write_command+0x38>
 1b8:	00 00       	nop
	}
	_delay_ms(2);
}
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LCD_clear>:

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
 1c6:	9f e1       	ldi	r25, 0x1F	; 31
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_clear+0xa>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_clear+0x10>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <LCD_init>:
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	80 e7       	ldi	r24, 0x70	; 112
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <LCD_init+0x6>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_init+0x10>
 1e2:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);				// 초기 구동 시간
	
	// 연결 핀을 출력으로 설정
	if(MODE == 8) DDR_DATA = 0xFF;
 1e4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <MODE>
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <LCD_init+0x20>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a b9       	out	0x0a, r24	; 10
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <LCD_init+0x26>
	else DDR_DATA |= 0xF0;
 1f2:	8a b1       	in	r24, 0x0a	; 10
 1f4:	80 6f       	ori	r24, 0xF0	; 240
 1f6:	8a b9       	out	0x0a, r24	; 10
	PORT_DATA = 0x00;
 1f8:	1b b8       	out	0x0b, r1	; 11
	
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
 1fa:	87 b1       	in	r24, 0x07	; 7
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	87 b9       	out	0x07, r24	; 7
	
	// RW 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1 << RW_PIN);
 200:	41 98       	cbi	0x08, 1	; 8
	
	if(MODE == 8)
 202:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <MODE>
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	21 f4       	brne	.+8      	; 0x212 <LCD_init+0x40>
	LCD_write_command(COMMAND_8_BIT_MODE);		// 8비트 모드
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
 210:	06 c0       	rjmp	.+12     	; 0x21e <LCD_init+0x4c>
	else{
		LCD_write_command(0x02);				// 4비트 모드 추가 명령
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
		LCD_write_command(COMMAND_4_BIT_MODE);		// 4비트 모드
 218:	88 e2       	ldi	r24, 0x28	; 40
 21a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
	}
	
	// display on/off control
	// 화면 on, 커서 off, 커서 깜빡임 off
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>

	LCD_clear();			// 화면 지움
 224:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_clear>

	// Entry Mode Set
	// 출력 후 커서를 오른쪽으로 옮김, 즉, DDRAM의 주소가 증가하며 화면 이동은 없음
	LCD_write_command(0x06);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
 22e:	08 95       	ret

00000230 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i++)			// 종료 문자를 만날 때까지
 238:	80 81       	ld	r24, Z
 23a:	88 23       	and	r24, r24
 23c:	59 f0       	breq	.+22     	; 0x254 <LCD_write_string+0x24>
 23e:	8f 01       	movw	r16, r30
 240:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_data(string[i]);		// 문자 단위 출력
 242:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i++)			// 종료 문자를 만날 때까지
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	f8 01       	movw	r30, r16
 24a:	ec 0f       	add	r30, r28
 24c:	f1 1d       	adc	r31, r1
 24e:	80 81       	ld	r24, Z
 250:	81 11       	cpse	r24, r1
 252:	f7 cf       	rjmp	.-18     	; 0x242 <LCD_write_string+0x12>
	LCD_write_data(string[i]);		// 문자 단위 출력
}
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col)
{
	col %= 16;		// [0 15]
 25c:	6f 70       	andi	r22, 0x0F	; 15
	row %= 4;		// [0 1]
 25e:	83 70       	andi	r24, 0x03	; 3

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = 0x00;
	if(row < 2) address = (0x40 * row) + col;
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	30 f4       	brcc	.+12     	; 0x270 <LCD_goto_XY+0x14>
 264:	90 e4       	ldi	r25, 0x40	; 64
 266:	89 9f       	mul	r24, r25
 268:	60 0d       	add	r22, r0
 26a:	11 24       	eor	r1, r1
 26c:	86 2f       	mov	r24, r22
 26e:	06 c0       	rjmp	.+12     	; 0x27c <LCD_goto_XY+0x20>
	else address = 0x10 + (0x40 * (row - 2)) + col;
 270:	90 e4       	ldi	r25, 0x40	; 64
 272:	89 9f       	mul	r24, r25
 274:	60 0d       	add	r22, r0
 276:	11 24       	eor	r1, r1
 278:	80 e9       	ldi	r24, 0x90	; 144
 27a:	86 0f       	add	r24, r22
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);	// 커서 이동
 27c:	80 58       	subi	r24, 0x80	; 128
 27e:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_command>
 282:	08 95       	ret

00000284 <main>:
int i, j, k;
char score[5] = "abcd\0";
char shot[3] = "ab\0";

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	28 97       	sbiw	r28, 0x08	; 8
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
 298:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_init>
	UBRR0H = 0x00;
 29c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 207; // 8MHz 9,600 BAUD rate
 2a0:	8f ec       	ldi	r24, 0xCF	; 207
 2a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= 0x02; // 2배속 모드, 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
 2a6:	e0 ec       	ldi	r30, 0xC0	; 192
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	80 83       	st	Z, r24
	UCSR0C |= 0x06;
 2b0:	e2 ec       	ldi	r30, 0xC2	; 194
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	86 60       	ori	r24, 0x06	; 6
 2b8:	80 83       	st	Z, r24
	UCSR0B |= 0x18;
 2ba:	e1 ec       	ldi	r30, 0xC1	; 193
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 61       	ori	r24, 0x18	; 24
 2c2:	80 83       	st	Z, r24
	
	DDRB |= 0x01;
 2c4:	20 9a       	sbi	0x04, 0	; 4
	PORTD |= 1<<PD2;   // enable PORTD.2 pin pull up resistor
 2c6:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK |= 1<<INT0;  // enable external interrupt 0
 2c8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 1<<ISC01; // interrupt on falling edge
 2ca:	e9 e6       	ldi	r30, 0x69	; 105
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
	sei();
 2d4:	78 94       	sei
	PORTB=0x00;
 2d6:	15 b8       	out	0x05, r1	; 5
    while (1)
	{
		for(int i = 0; i < 3; i++)
		{
			while( !(UCSR0A & (1<<RXC0)) );
			data = UDR0;
 2d8:	0f 2e       	mov	r0, r31
 2da:	f6 ec       	ldi	r31, 0xC6	; 198
 2dc:	6f 2e       	mov	r6, r31
 2de:	71 2c       	mov	r7, r1
 2e0:	f0 2d       	mov	r31, r0
				LCD_clear();
				switch(data)
				{
					case 119: LCD_write_string("1: Hit!"); break;
					case 120: LCD_write_string("2: Hit!"); break;
					case 121: LCD_write_string("3: Hit!"); score_int += 100; tag = 1; break;
 2e2:	22 24       	eor	r2, r2
 2e4:	23 94       	inc	r2
 2e6:	31 2c       	mov	r3, r1
		LCD_goto_XY(2, 0);
		LCD_write_string("Score: ");
		LCD_goto_XY(2, 8);
		
		for(i = 0; score_int - i*1000 >= 1000; i++);
		score[0] = i + 48; //1000s, thousands
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f3 e0       	ldi	r31, 0x03	; 3
 2ec:	4f 2e       	mov	r4, r31
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	5f 2e       	mov	r5, r31
 2f2:	f0 2d       	mov	r31, r0
int i, j, k;
char score[5] = "abcd\0";
char shot[3] = "ab\0";

int main(void)
{
 2f4:	23 e0       	ldi	r18, 0x03	; 3
 2f6:	30 e0       	ldi	r19, 0x00	; 0
	//LCD_clear();
    while (1)
	{
		for(int i = 0; i < 3; i++)
		{
			while( !(UCSR0A & (1<<RXC0)) );
 2f8:	e0 ec       	ldi	r30, 0xC0	; 192
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	dc f7       	brge	.-10     	; 0x2f8 <main+0x74>
			data = UDR0;
 302:	f3 01       	movw	r30, r6
 304:	80 81       	ld	r24, Z
 306:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <data>
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	31 09       	sbc	r19, r1
	PORTB=0x00;
	
	//LCD_clear();
    while (1)
	{
		for(int i = 0; i < 3; i++)
 30e:	a1 f7       	brne	.-24     	; 0x2f8 <main+0x74>
			while( !(UCSR0A & (1<<RXC0)) );
			data = UDR0;
		}
		while(1)
		{
			if(tag == 1)
 310:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <tag>
 314:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <tag+0x1>
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	c9 f4       	brne	.+50     	; 0x34e <main+0xca>
 31c:	ff ef       	ldi	r31, 0xFF	; 255
 31e:	29 e6       	ldi	r18, 0x69	; 105
 320:	38 e1       	ldi	r19, 0x18	; 24
 322:	f1 50       	subi	r31, 0x01	; 1
 324:	20 40       	sbci	r18, 0x00	; 0
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x9e>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0xa8>
 32c:	00 00       	nop
			{
				while(1)
				{
					_delay_ms(500);
					while( !(UCSR0A & (1<<RXC0)) );
 32e:	e0 ec       	ldi	r30, 0xC0	; 192
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	88 23       	and	r24, r24
 336:	dc f7       	brge	.-10     	; 0x32e <main+0xaa>
					data = UDR0;
 338:	f3 01       	movw	r30, r6
 33a:	80 81       	ld	r24, Z
 33c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <data>
					if(data < 119 || data > 122)
 340:	87 57       	subi	r24, 0x77	; 119
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	58 f3       	brcs	.-42     	; 0x31c <main+0x98>
					{
						tag = 0;
 346:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <tag+0x1>
 34a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tag>
						break;
					}
				}
			}
			
			while( !(UCSR0A & (1<<RXC0)) );	// 데이터 수신 대기
 34e:	e0 ec       	ldi	r30, 0xC0	; 192
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	88 23       	and	r24, r24
 356:	dc f7       	brge	.-10     	; 0x34e <main+0xca>
			data = UDR0;
 358:	f3 01       	movw	r30, r6
 35a:	80 81       	ld	r24, Z
 35c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <data>
			
			if(data >= 119 && data <= 122 && tag == 0)
 360:	87 57       	subi	r24, 0x77	; 119
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	08 f0       	brcs	.+2      	; 0x368 <main+0xe4>
 366:	50 c0       	rjmp	.+160    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 368:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <tag>
 36c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <tag+0x1>
 370:	89 2b       	or	r24, r25
 372:	09 f0       	breq	.+2      	; 0x376 <main+0xf2>
 374:	49 c0       	rjmp	.+146    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				LCD_clear();
 376:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_clear>
				switch(data)
 37a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <data>
 37e:	88 37       	cpi	r24, 0x78	; 120
 380:	71 f0       	breq	.+28     	; 0x39e <main+0x11a>
 382:	18 f4       	brcc	.+6      	; 0x38a <main+0x106>
 384:	87 37       	cpi	r24, 0x77	; 119
 386:	31 f0       	breq	.+12     	; 0x394 <main+0x110>
 388:	34 c0       	rjmp	.+104    	; 0x3f2 <main+0x16e>
 38a:	89 37       	cpi	r24, 0x79	; 121
 38c:	69 f0       	breq	.+26     	; 0x3a8 <main+0x124>
 38e:	8a 37       	cpi	r24, 0x7A	; 122
 390:	f1 f0       	breq	.+60     	; 0x3ce <main+0x14a>
 392:	2f c0       	rjmp	.+94     	; 0x3f2 <main+0x16e>
				{
					case 119: LCD_write_string("1: Hit!"); break;
 394:	87 e2       	ldi	r24, 0x27	; 39
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
 39c:	2a c0       	rjmp	.+84     	; 0x3f2 <main+0x16e>
					case 120: LCD_write_string("2: Hit!"); break;
 39e:	8f e2       	ldi	r24, 0x2F	; 47
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
 3a6:	25 c0       	rjmp	.+74     	; 0x3f2 <main+0x16e>
					case 121: LCD_write_string("3: Hit!"); score_int += 100; tag = 1; break;
 3a8:	87 e3       	ldi	r24, 0x37	; 55
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
 3b0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <score_int>
 3b4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <score_int+0x1>
 3b8:	8c 59       	subi	r24, 0x9C	; 156
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <score_int+0x1>
 3c0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <score_int>
 3c4:	30 92 77 01 	sts	0x0177, r3	; 0x800177 <tag+0x1>
 3c8:	20 92 76 01 	sts	0x0176, r2	; 0x800176 <tag>
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <main+0x16e>
					case 122: LCD_write_string("4: Hit!"); score_int += 200; tag = 1; break;
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
 3d6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <score_int>
 3da:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <score_int+0x1>
 3de:	88 53       	subi	r24, 0x38	; 56
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <score_int+0x1>
 3e6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <score_int>
 3ea:	30 92 77 01 	sts	0x0177, r3	; 0x800177 <tag+0x1>
 3ee:	20 92 76 01 	sts	0x0176, r2	; 0x800176 <tag>
 3f2:	ff ef       	ldi	r31, 0xFF	; 255
 3f4:	23 ed       	ldi	r18, 0xD3	; 211
 3f6:	30 e3       	ldi	r19, 0x30	; 48
 3f8:	f1 50       	subi	r31, 0x01	; 1
 3fa:	20 40       	sbci	r18, 0x00	; 0
 3fc:	30 40       	sbci	r19, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x174>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
				}
				_delay_ms(1000);
				LCD_clear();
 404:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_clear>
			}
			if(data == 35 && flag == 0) {flag = 1; break;}
 408:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <data>
 40c:	83 32       	cpi	r24, 0x23	; 35
 40e:	61 f4       	brne	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 410:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <flag>
 414:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <flag+0x1>
 418:	23 2b       	or	r18, r19
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	79 cf       	rjmp	.-270    	; 0x310 <main+0x8c>
 41e:	30 92 75 01 	sts	0x0175, r3	; 0x800175 <flag+0x1>
 422:	20 92 74 01 	sts	0x0174, r2	; 0x800174 <flag>
 426:	0f c0       	rjmp	.+30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			else if(data == 36 && flag == 1) {flag = 0; break;}
 428:	84 32       	cpi	r24, 0x24	; 36
 42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	71 cf       	rjmp	.-286    	; 0x310 <main+0x8c>
 42e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <flag>
 432:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <flag+0x1>
 436:	21 30       	cpi	r18, 0x01	; 1
 438:	31 05       	cpc	r19, r1
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	69 cf       	rjmp	.-302    	; 0x310 <main+0x8c>
 43e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <flag+0x1>
 442:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <flag>
		}
		int row = data - 33; // row = 0 ~ 3
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	7c 01       	movw	r14, r24
 44a:	41 e2       	ldi	r20, 0x21	; 33
 44c:	e4 1a       	sub	r14, r20
 44e:	f1 08       	sbc	r15, r1
 450:	c7 01       	movw	r24, r14
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	8e 19       	sub	r24, r14
 460:	9f 09       	sbc	r25, r15
 462:	fc 01       	movw	r30, r24
 464:	e4 5f       	subi	r30, 0xF4	; 244
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	5f 01       	movw	r10, r30
		for(int col = 0; col <= 3; col++)
 46a:	00 e0       	ldi	r16, 0x00	; 0
 46c:	10 e0       	ldi	r17, 0x00	; 0
		{
			while( !(UCSR0A & (1<<RXC0)) );	// 데이터 수신 대기
			data = UDR0;
			adc_str[row][col + 2] = data; // Stored as string type
			adc_int[row] = adc_int[row] * ((col + 3) / 4) + pow(10, col ^ 3) * (data - 48); // Stored as int type
 46e:	c7 01       	movw	r24, r14
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	9c 01       	movw	r18, r24
 476:	22 58       	subi	r18, 0x82	; 130
 478:	3e 4f       	sbci	r19, 0xFE	; 254
 47a:	69 01       	movw	r12, r18
			else if(data == 36 && flag == 1) {flag = 0; break;}
		}
		int row = data - 33; // row = 0 ~ 3
		for(int col = 0; col <= 3; col++)
		{
			while( !(UCSR0A & (1<<RXC0)) );	// 데이터 수신 대기
 47c:	e0 ec       	ldi	r30, 0xC0	; 192
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	88 23       	and	r24, r24
 484:	dc f7       	brge	.-10     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			data = UDR0;
 486:	f3 01       	movw	r30, r6
 488:	90 80       	ld	r9, Z
 48a:	90 92 8a 01 	sts	0x018A, r9	; 0x80018a <data>
			adc_str[row][col + 2] = data; // Stored as string type
 48e:	f5 01       	movw	r30, r10
 490:	91 92       	st	Z+, r9
 492:	5f 01       	movw	r10, r30
			adc_int[row] = adc_int[row] * ((col + 3) / 4) + pow(10, col ^ 3) * (data - 48); // Stored as int type
 494:	b8 01       	movw	r22, r16
 496:	f3 e0       	ldi	r31, 0x03	; 3
 498:	6f 27       	eor	r22, r31
 49a:	07 2e       	mov	r0, r23
 49c:	00 0c       	add	r0, r0
 49e:	88 0b       	sbc	r24, r24
 4a0:	99 0b       	sbc	r25, r25
 4a2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	91 e4       	ldi	r25, 0x41	; 65
 4b2:	0e 94 06 06 	call	0xc0c	; 0xc0c <pow>
 4b6:	69 83       	std	Y+1, r22	; 0x01
 4b8:	7a 83       	std	Y+2, r23	; 0x02
 4ba:	8b 83       	std	Y+3, r24	; 0x03
 4bc:	9c 83       	std	Y+4, r25	; 0x04
 4be:	98 01       	movw	r18, r16
 4c0:	2d 5f       	subi	r18, 0xFD	; 253
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	c9 01       	movw	r24, r18
 4c6:	99 23       	and	r25, r25
 4c8:	0c f4       	brge	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	03 96       	adiw	r24, 0x03	; 3
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	95 95       	asr	r25
 4d2:	87 95       	ror	r24
 4d4:	f6 01       	movw	r30, r12
 4d6:	20 81       	ld	r18, Z
 4d8:	31 81       	ldd	r19, Z+1	; 0x01
 4da:	82 9f       	mul	r24, r18
 4dc:	b0 01       	movw	r22, r0
 4de:	83 9f       	mul	r24, r19
 4e0:	70 0d       	add	r23, r0
 4e2:	92 9f       	mul	r25, r18
 4e4:	70 0d       	add	r23, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	07 2e       	mov	r0, r23
 4ea:	00 0c       	add	r0, r0
 4ec:	88 0b       	sbc	r24, r24
 4ee:	99 0b       	sbc	r25, r25
 4f0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
 4f4:	6d 83       	std	Y+5, r22	; 0x05
 4f6:	7e 83       	std	Y+6, r23	; 0x06
 4f8:	8f 83       	std	Y+7, r24	; 0x07
 4fa:	98 87       	std	Y+8, r25	; 0x08
 4fc:	69 2d       	mov	r22, r9
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	60 53       	subi	r22, 0x30	; 48
 502:	71 09       	sbc	r23, r1
 504:	07 2e       	mov	r0, r23
 506:	00 0c       	add	r0, r0
 508:	88 0b       	sbc	r24, r24
 50a:	99 0b       	sbc	r25, r25
 50c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
 510:	29 81       	ldd	r18, Y+1	; 0x01
 512:	3a 81       	ldd	r19, Y+2	; 0x02
 514:	4b 81       	ldd	r20, Y+3	; 0x03
 516:	5c 81       	ldd	r21, Y+4	; 0x04
 518:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 51c:	9b 01       	movw	r18, r22
 51e:	ac 01       	movw	r20, r24
 520:	6d 81       	ldd	r22, Y+5	; 0x05
 522:	7e 81       	ldd	r23, Y+6	; 0x06
 524:	8f 81       	ldd	r24, Y+7	; 0x07
 526:	98 85       	ldd	r25, Y+8	; 0x08
 528:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__addsf3>
 52c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
 530:	f6 01       	movw	r30, r12
 532:	71 83       	std	Z+1, r23	; 0x01
 534:	60 83       	st	Z, r22
			}
			if(data == 35 && flag == 0) {flag = 1; break;}
			else if(data == 36 && flag == 1) {flag = 0; break;}
		}
		int row = data - 33; // row = 0 ~ 3
		for(int col = 0; col <= 3; col++)
 536:	0f 5f       	subi	r16, 0xFF	; 255
 538:	1f 4f       	sbci	r17, 0xFF	; 255
 53a:	04 30       	cpi	r16, 0x04	; 4
 53c:	11 05       	cpc	r17, r1
 53e:	09 f0       	breq	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	9d cf       	rjmp	.-198    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			data = UDR0;
			adc_str[row][col + 2] = data; // Stored as string type
			adc_int[row] = adc_int[row] * ((col + 3) / 4) + pow(10, col ^ 3) * (data - 48); // Stored as int type
		}
		
		LCD_goto_XY((row / 2), (row % 2) * 8);
 542:	c7 01       	movw	r24, r14
 544:	81 70       	andi	r24, 0x01	; 1
 546:	90 78       	andi	r25, 0x80	; 128
 548:	99 23       	and	r25, r25
 54a:	24 f4       	brge	.+8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	8e 6f       	ori	r24, 0xFE	; 254
 550:	9f 6f       	ori	r25, 0xFF	; 255
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	68 2f       	mov	r22, r24
 556:	66 0f       	add	r22, r22
 558:	66 0f       	add	r22, r22
 55a:	66 0f       	add	r22, r22
 55c:	c7 01       	movw	r24, r14
 55e:	ff 20       	and	r15, r15
 560:	0c f4       	brge	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	95 95       	asr	r25
 566:	87 95       	ror	r24
 568:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
		LCD_write_string(adc_str[row]); // LCD 출력
 56c:	c7 01       	movw	r24, r14
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	8e 19       	sub	r24, r14
 57c:	9f 09       	sbc	r25, r15
 57e:	86 5f       	subi	r24, 0xF6	; 246
 580:	9e 4f       	sbci	r25, 0xFE	; 254
 582:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
		LCD_goto_XY(2, 0);
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
		LCD_write_string("Score: ");
 58e:	87 e4       	ldi	r24, 0x47	; 71
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
		LCD_goto_XY(2, 8);
 596:	68 e0       	ldi	r22, 0x08	; 8
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
		
		for(i = 0; score_int - i*1000 >= 1000; i++);
 59e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <i+0x1>
 5a2:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <i>
 5a6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <score_int>
 5aa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <score_int+0x1>
 5ae:	88 3e       	cpi	r24, 0xE8	; 232
 5b0:	f3 e0       	ldi	r31, 0x03	; 3
 5b2:	9f 07       	cpc	r25, r31
 5b4:	7c f0       	brlt	.+30     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	2f 5f       	subi	r18, 0xFF	; 255
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	88 5e       	subi	r24, 0xE8	; 232
 5c0:	93 40       	sbci	r25, 0x03	; 3
 5c2:	88 3e       	cpi	r24, 0xE8	; 232
 5c4:	43 e0       	ldi	r20, 0x03	; 3
 5c6:	94 07       	cpc	r25, r20
 5c8:	c4 f7       	brge	.-16     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ca:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <i+0x1>
 5ce:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <i>
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
		score[0] = i + 48; //1000s, thousands
 5d8:	20 5d       	subi	r18, 0xD0	; 208
 5da:	f2 01       	movw	r30, r4
 5dc:	20 83       	st	Z, r18
 5de:	8f e3       	ldi	r24, 0x3F	; 63
 5e0:	9c e9       	ldi	r25, 0x9C	; 156
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5e8:	00 00       	nop
		_delay_ms(10);
		
		for(j = 0; score_int - i*1000 - j*100 >= 100; j++);
 5ea:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <j+0x1>
 5ee:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <j>
 5f2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <i>
 5f6:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <i+0x1>
 5fa:	e8 e1       	ldi	r30, 0x18	; 24
 5fc:	fc ef       	ldi	r31, 0xFC	; 252
 5fe:	8e 9f       	mul	r24, r30
 600:	90 01       	movw	r18, r0
 602:	8f 9f       	mul	r24, r31
 604:	30 0d       	add	r19, r0
 606:	9e 9f       	mul	r25, r30
 608:	30 0d       	add	r19, r0
 60a:	11 24       	eor	r1, r1
 60c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <score_int>
 610:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <score_int+0x1>
 614:	82 0f       	add	r24, r18
 616:	93 1f       	adc	r25, r19
 618:	84 36       	cpi	r24, 0x64	; 100
 61a:	91 05       	cpc	r25, r1
 61c:	74 f0       	brlt	.+28     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	84 56       	subi	r24, 0x64	; 100
 628:	91 09       	sbc	r25, r1
 62a:	84 36       	cpi	r24, 0x64	; 100
 62c:	91 05       	cpc	r25, r1
 62e:	cc f7       	brge	.-14     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 630:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <j+0x1>
 634:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <j>
 638:	02 c0       	rjmp	.+4      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	30 e0       	ldi	r19, 0x00	; 0
		score[1] = j + 48; //100s, hundreds
 63e:	20 5d       	subi	r18, 0xD0	; 208
 640:	f2 01       	movw	r30, r4
 642:	21 83       	std	Z+1, r18	; 0x01
 644:	8f e3       	ldi	r24, 0x3F	; 63
 646:	9c e9       	ldi	r25, 0x9C	; 156
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 64e:	00 00       	nop
		_delay_ms(10);
		
		for(k = 0; score_int - i*1000 - j*100 - k*10 >= 10; k++);
 650:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <k+0x1>
 654:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <k>
 658:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <i>
 65c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <i+0x1>
 660:	e8 e1       	ldi	r30, 0x18	; 24
 662:	fc ef       	ldi	r31, 0xFC	; 252
 664:	8e 9f       	mul	r24, r30
 666:	90 01       	movw	r18, r0
 668:	8f 9f       	mul	r24, r31
 66a:	30 0d       	add	r19, r0
 66c:	9e 9f       	mul	r25, r30
 66e:	30 0d       	add	r19, r0
 670:	11 24       	eor	r1, r1
 672:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <score_int>
 676:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <score_int+0x1>
 67a:	28 0f       	add	r18, r24
 67c:	39 1f       	adc	r19, r25
 67e:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <j>
 682:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <j+0x1>
 686:	6c e9       	ldi	r22, 0x9C	; 156
 688:	64 03       	mulsu	r22, r20
 68a:	c0 01       	movw	r24, r0
 68c:	65 9f       	mul	r22, r21
 68e:	90 0d       	add	r25, r0
 690:	11 24       	eor	r1, r1
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	8a 30       	cpi	r24, 0x0A	; 10
 698:	91 05       	cpc	r25, r1
 69a:	6c f0       	brlt	.+26     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	2f 5f       	subi	r18, 0xFF	; 255
 6a2:	3f 4f       	sbci	r19, 0xFF	; 255
 6a4:	0a 97       	sbiw	r24, 0x0a	; 10
 6a6:	8a 30       	cpi	r24, 0x0A	; 10
 6a8:	91 05       	cpc	r25, r1
 6aa:	d4 f7       	brge	.-12     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 6ac:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <k+0x1>
 6b0:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <k>
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
		score[2] = k + 48; //10s, tens
 6ba:	20 5d       	subi	r18, 0xD0	; 208
 6bc:	f2 01       	movw	r30, r4
 6be:	22 83       	std	Z+2, r18	; 0x02
 6c0:	8f e3       	ldi	r24, 0x3F	; 63
 6c2:	9c e9       	ldi	r25, 0x9C	; 156
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6ca:	00 00       	nop
		_delay_ms(10);
		
		score[3] = score_int - i*1000 - j*100 - k*10 + 48; //1s, units
 6cc:	e8 e8       	ldi	r30, 0x88	; 136
 6ce:	f1 e0       	ldi	r31, 0x01	; 1
 6d0:	90 81       	ld	r25, Z
 6d2:	e8 e7       	ldi	r30, 0x78	; 120
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
 6d6:	80 81       	ld	r24, Z
 6d8:	80 5d       	subi	r24, 0xD0	; 208
 6da:	f8 e1       	ldi	r31, 0x18	; 24
 6dc:	9f 9f       	mul	r25, r31
 6de:	80 0d       	add	r24, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	ec e7       	ldi	r30, 0x7C	; 124
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	90 81       	ld	r25, Z
 6e8:	f4 e6       	ldi	r31, 0x64	; 100
 6ea:	9f 9f       	mul	r25, r31
 6ec:	80 19       	sub	r24, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <k>
 6f4:	99 0f       	add	r25, r25
 6f6:	29 2f       	mov	r18, r25
 6f8:	22 0f       	add	r18, r18
 6fa:	22 0f       	add	r18, r18
 6fc:	92 0f       	add	r25, r18
 6fe:	89 1b       	sub	r24, r25
 700:	f2 01       	movw	r30, r4
 702:	83 83       	std	Z+3, r24	; 0x03
 704:	8f e3       	ldi	r24, 0x3F	; 63
 706:	9c e9       	ldi	r25, 0x9C	; 156
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 70e:	00 00       	nop
		_delay_ms(10);
		
		LCD_write_string(score);
 710:	c2 01       	movw	r24, r4
 712:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
		
		LCD_goto_XY(3, 0);
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
		LCD_write_string("Shots: ");
 71e:	8f e4       	ldi	r24, 0x4F	; 79
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
		LCD_goto_XY(3, 8);
 726:	68 e0       	ldi	r22, 0x08	; 8
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
		
		for(k = 0; shot_int - k*10 >= 10; k++);
 72e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <k+0x1>
 732:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <k>
 736:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <shot_int>
 73a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <shot_int+0x1>
 73e:	8a 30       	cpi	r24, 0x0A	; 10
 740:	91 05       	cpc	r25, r1
 742:	6c f0       	brlt	.+26     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	0a 97       	sbiw	r24, 0x0a	; 10
 74e:	8a 30       	cpi	r24, 0x0A	; 10
 750:	91 05       	cpc	r25, r1
 752:	d4 f7       	brge	.-12     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 754:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <k+0x1>
 758:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <k>
 75c:	02 c0       	rjmp	.+4      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	30 e0       	ldi	r19, 0x00	; 0
		shot[0] = k + 48; //10s, tens
 762:	e0 e0       	ldi	r30, 0x00	; 0
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	20 5d       	subi	r18, 0xD0	; 208
 768:	20 83       	st	Z, r18
 76a:	8f e3       	ldi	r24, 0x3F	; 63
 76c:	9c e9       	ldi	r25, 0x9C	; 156
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 772:	00 c0       	rjmp	.+0      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
 774:	00 00       	nop
		_delay_ms(10);
		
		shot[1] = shot_int - k*10 + 48; //1s, units
 776:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <shot_int>
 77a:	80 5d       	subi	r24, 0xD0	; 208
 77c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <k>
 780:	99 0f       	add	r25, r25
 782:	29 2f       	mov	r18, r25
 784:	22 0f       	add	r18, r18
 786:	22 0f       	add	r18, r18
 788:	92 0f       	add	r25, r18
 78a:	89 1b       	sub	r24, r25
 78c:	81 83       	std	Z+1, r24	; 0x01
 78e:	ef e3       	ldi	r30, 0x3F	; 63
 790:	fc e9       	ldi	r31, 0x9C	; 156
 792:	31 97       	sbiw	r30, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
 796:	00 c0       	rjmp	.+0      	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 798:	00 00       	nop
		_delay_ms(10);
		
		LCD_write_string(shot);
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
		
		
		//LCD_clear();
		//_delay_ms(10);
		
		if(shot_int <= 0)
 7a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <shot_int>
 7a6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <shot_int+0x1>
 7aa:	18 16       	cp	r1, r24
 7ac:	19 06       	cpc	r1, r25
 7ae:	2c f1       	brlt	.+74     	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
		{
			LCD_goto_XY(0, 0);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
			LCD_write_string("Game Over!");
 7b8:	87 e5       	ldi	r24, 0x57	; 87
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
			LCD_goto_XY(1, 0);
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_goto_XY>
			LCD_write_string("Retry in 5 sec");
 7c8:	82 e6       	ldi	r24, 0x62	; 98
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write_string>
 7d0:	ff ef       	ldi	r31, 0xFF	; 255
 7d2:	23 e2       	ldi	r18, 0x23	; 35
 7d4:	34 ef       	ldi	r19, 0xF4	; 244
 7d6:	f1 50       	subi	r31, 0x01	; 1
 7d8:	20 40       	sbci	r18, 0x00	; 0
 7da:	30 40       	sbci	r19, 0x00	; 0
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
 7e0:	00 00       	nop
			_delay_ms(5000);
			LCD_clear();
 7e2:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_clear>
			score_int = 0;
 7e6:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <score_int+0x1>
 7ea:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <score_int>
			shot_int = 20;
 7ee:	84 e1       	ldi	r24, 0x14	; 20
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <shot_int+0x1>
 7f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <shot_int>
 7fa:	4f ef       	ldi	r20, 0xFF	; 255
 7fc:	57 ee       	ldi	r21, 0xE7	; 231
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	41 50       	subi	r20, 0x01	; 1
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	80 40       	sbci	r24, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
 808:	00 c0       	rjmp	.+0      	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
 80a:	00 00       	nop
 80c:	73 cd       	rjmp	.-1306   	; 0x2f4 <main+0x70>

0000080e <delay>:
	}
}

void delay(void)
{
	TCNT0 = 0x00;
 80e:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 0x05;     // start timer 0,normal mode, prescaler
 810:	85 e0       	ldi	r24, 0x05	; 5
 812:	85 bd       	out	0x25, r24	; 37
	while ((TIFR0 & (1<<TOV0)) == 0);
 814:	a8 9b       	sbis	0x15, 0	; 21
 816:	fe cf       	rjmp	.-4      	; 0x814 <delay+0x6>
	TCCR0B = 0x00;     // stop timer 0
 818:	15 bc       	out	0x25, r1	; 37
	TIFR0 |= 1 << TOV0;  // clear timer 0 overflow flag
 81a:	a8 9a       	sbi	0x15, 0	; 21
 81c:	08 95       	ret

0000081e <__vector_1>:
}

ISR(INT0_vect)
{
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31
	cnt = 0;
 840:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <cnt+0x1>
 844:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <cnt>
	if(gag == 0) {shot_int -= 1; gag = 1;}
 848:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 84c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
 850:	89 2b       	or	r24, r25
 852:	81 f4       	brne	.+32     	; 0x874 <__vector_1+0x56>
 854:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <shot_int>
 858:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <shot_int+0x1>
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <shot_int+0x1>
 862:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <shot_int>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
 86e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
 872:	04 c0       	rjmp	.+8      	; 0x87c <__vector_1+0x5e>
	else gag = 0;
 874:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__data_end+0x1>
 878:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
	PORTB |= 0x01;
 87c:	28 9a       	sbi	0x05, 0	; 5
	//while(cnt < 31500)
	//{
	//   cnt++;
	//}
	while(cnt < 10)	//300ms
 87e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cnt>
 882:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <cnt+0x1>
 886:	0a 97       	sbiw	r24, 0x0a	; 10
 888:	8c f4       	brge	.+34     	; 0x8ac <__vector_1+0x8e>
	{
		delay();
 88a:	0e 94 07 04 	call	0x80e	; 0x80e <delay>
		cnt++;
 88e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cnt>
 892:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <cnt+0x1>
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <cnt+0x1>
 89c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cnt>
	PORTB |= 0x01;
	//while(cnt < 31500)
	//{
	//   cnt++;
	//}
	while(cnt < 10)	//300ms
 8a0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cnt>
 8a4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <cnt+0x1>
 8a8:	0a 97       	sbiw	r24, 0x0a	; 10
 8aa:	7c f3       	brlt	.-34     	; 0x88a <__vector_1+0x6c>
	{
		delay();
		cnt++;
	}
	PORTB &= 0xFE;
 8ac:	28 98       	cbi	0x05, 0	; 5
 8ae:	ff 91       	pop	r31
 8b0:	ef 91       	pop	r30
 8b2:	bf 91       	pop	r27
 8b4:	af 91       	pop	r26
 8b6:	9f 91       	pop	r25
 8b8:	8f 91       	pop	r24
 8ba:	7f 91       	pop	r23
 8bc:	6f 91       	pop	r22
 8be:	5f 91       	pop	r21
 8c0:	4f 91       	pop	r20
 8c2:	3f 91       	pop	r19
 8c4:	2f 91       	pop	r18
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <__subsf3>:
 8d0:	50 58       	subi	r21, 0x80	; 128

000008d2 <__addsf3>:
 8d2:	bb 27       	eor	r27, r27
 8d4:	aa 27       	eor	r26, r26
 8d6:	0e 94 80 04 	call	0x900	; 0x900 <__addsf3x>
 8da:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
 8de:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
 8e2:	38 f0       	brcs	.+14     	; 0x8f2 <__addsf3+0x20>
 8e4:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__addsf3+0x20>
 8ea:	39 f4       	brne	.+14     	; 0x8fa <__addsf3+0x28>
 8ec:	9f 3f       	cpi	r25, 0xFF	; 255
 8ee:	19 f4       	brne	.+6      	; 0x8f6 <__addsf3+0x24>
 8f0:	26 f4       	brtc	.+8      	; 0x8fa <__addsf3+0x28>
 8f2:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
 8f6:	0e f4       	brtc	.+2      	; 0x8fa <__addsf3+0x28>
 8f8:	e0 95       	com	r30
 8fa:	e7 fb       	bst	r30, 7
 8fc:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>

00000900 <__addsf3x>:
 900:	e9 2f       	mov	r30, r25
 902:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
 906:	58 f3       	brcs	.-42     	; 0x8de <__addsf3+0xc>
 908:	ba 17       	cp	r27, r26
 90a:	62 07       	cpc	r22, r18
 90c:	73 07       	cpc	r23, r19
 90e:	84 07       	cpc	r24, r20
 910:	95 07       	cpc	r25, r21
 912:	20 f0       	brcs	.+8      	; 0x91c <__addsf3x+0x1c>
 914:	79 f4       	brne	.+30     	; 0x934 <__addsf3x+0x34>
 916:	a6 f5       	brtc	.+104    	; 0x980 <__addsf3x+0x80>
 918:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__addsf3x+0x20>
 91e:	e0 95       	com	r30
 920:	0b 2e       	mov	r0, r27
 922:	ba 2f       	mov	r27, r26
 924:	a0 2d       	mov	r26, r0
 926:	0b 01       	movw	r0, r22
 928:	b9 01       	movw	r22, r18
 92a:	90 01       	movw	r18, r0
 92c:	0c 01       	movw	r0, r24
 92e:	ca 01       	movw	r24, r20
 930:	a0 01       	movw	r20, r0
 932:	11 24       	eor	r1, r1
 934:	ff 27       	eor	r31, r31
 936:	59 1b       	sub	r21, r25
 938:	99 f0       	breq	.+38     	; 0x960 <__addsf3x+0x60>
 93a:	59 3f       	cpi	r21, 0xF9	; 249
 93c:	50 f4       	brcc	.+20     	; 0x952 <__addsf3x+0x52>
 93e:	50 3e       	cpi	r21, 0xE0	; 224
 940:	68 f1       	brcs	.+90     	; 0x99c <__addsf3x+0x9c>
 942:	1a 16       	cp	r1, r26
 944:	f0 40       	sbci	r31, 0x00	; 0
 946:	a2 2f       	mov	r26, r18
 948:	23 2f       	mov	r18, r19
 94a:	34 2f       	mov	r19, r20
 94c:	44 27       	eor	r20, r20
 94e:	58 5f       	subi	r21, 0xF8	; 248
 950:	f3 cf       	rjmp	.-26     	; 0x938 <__addsf3x+0x38>
 952:	46 95       	lsr	r20
 954:	37 95       	ror	r19
 956:	27 95       	ror	r18
 958:	a7 95       	ror	r26
 95a:	f0 40       	sbci	r31, 0x00	; 0
 95c:	53 95       	inc	r21
 95e:	c9 f7       	brne	.-14     	; 0x952 <__addsf3x+0x52>
 960:	7e f4       	brtc	.+30     	; 0x980 <__addsf3x+0x80>
 962:	1f 16       	cp	r1, r31
 964:	ba 0b       	sbc	r27, r26
 966:	62 0b       	sbc	r22, r18
 968:	73 0b       	sbc	r23, r19
 96a:	84 0b       	sbc	r24, r20
 96c:	ba f0       	brmi	.+46     	; 0x99c <__addsf3x+0x9c>
 96e:	91 50       	subi	r25, 0x01	; 1
 970:	a1 f0       	breq	.+40     	; 0x99a <__addsf3x+0x9a>
 972:	ff 0f       	add	r31, r31
 974:	bb 1f       	adc	r27, r27
 976:	66 1f       	adc	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	c2 f7       	brpl	.-16     	; 0x96e <__addsf3x+0x6e>
 97e:	0e c0       	rjmp	.+28     	; 0x99c <__addsf3x+0x9c>
 980:	ba 0f       	add	r27, r26
 982:	62 1f       	adc	r22, r18
 984:	73 1f       	adc	r23, r19
 986:	84 1f       	adc	r24, r20
 988:	48 f4       	brcc	.+18     	; 0x99c <__addsf3x+0x9c>
 98a:	87 95       	ror	r24
 98c:	77 95       	ror	r23
 98e:	67 95       	ror	r22
 990:	b7 95       	ror	r27
 992:	f7 95       	ror	r31
 994:	9e 3f       	cpi	r25, 0xFE	; 254
 996:	08 f0       	brcs	.+2      	; 0x99a <__addsf3x+0x9a>
 998:	b0 cf       	rjmp	.-160    	; 0x8fa <__addsf3+0x28>
 99a:	93 95       	inc	r25
 99c:	88 0f       	add	r24, r24
 99e:	08 f0       	brcs	.+2      	; 0x9a2 <__addsf3x+0xa2>
 9a0:	99 27       	eor	r25, r25
 9a2:	ee 0f       	add	r30, r30
 9a4:	97 95       	ror	r25
 9a6:	87 95       	ror	r24
 9a8:	08 95       	ret

000009aa <__fixsfsi>:
 9aa:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
 9ae:	68 94       	set
 9b0:	b1 11       	cpse	r27, r1
 9b2:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 9b6:	08 95       	ret

000009b8 <__fixunssfsi>:
 9b8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
 9bc:	88 f0       	brcs	.+34     	; 0x9e0 <__fixunssfsi+0x28>
 9be:	9f 57       	subi	r25, 0x7F	; 127
 9c0:	98 f0       	brcs	.+38     	; 0x9e8 <__fixunssfsi+0x30>
 9c2:	b9 2f       	mov	r27, r25
 9c4:	99 27       	eor	r25, r25
 9c6:	b7 51       	subi	r27, 0x17	; 23
 9c8:	b0 f0       	brcs	.+44     	; 0x9f6 <__fixunssfsi+0x3e>
 9ca:	e1 f0       	breq	.+56     	; 0xa04 <__fixunssfsi+0x4c>
 9cc:	66 0f       	add	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	1a f0       	brmi	.+6      	; 0x9dc <__fixunssfsi+0x24>
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__fixunssfsi+0x14>
 9da:	14 c0       	rjmp	.+40     	; 0xa04 <__fixunssfsi+0x4c>
 9dc:	b1 30       	cpi	r27, 0x01	; 1
 9de:	91 f0       	breq	.+36     	; 0xa04 <__fixunssfsi+0x4c>
 9e0:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_zero>
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	08 95       	ret
 9e8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
 9ec:	67 2f       	mov	r22, r23
 9ee:	78 2f       	mov	r23, r24
 9f0:	88 27       	eor	r24, r24
 9f2:	b8 5f       	subi	r27, 0xF8	; 248
 9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x4c>
 9f6:	b9 3f       	cpi	r27, 0xF9	; 249
 9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x34>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b3 95       	inc	r27
 a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x42>
 a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x5c>
 a06:	90 95       	com	r25
 a08:	80 95       	com	r24
 a0a:	70 95       	com	r23
 a0c:	61 95       	neg	r22
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	8f 4f       	sbci	r24, 0xFF	; 255
 a12:	9f 4f       	sbci	r25, 0xFF	; 255
 a14:	08 95       	ret

00000a16 <__floatunsisf>:
 a16:	e8 94       	clt
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
 a1e:	90 95       	com	r25
 a20:	80 95       	com	r24
 a22:	70 95       	com	r23
 a24:	61 95       	neg	r22
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	99 23       	and	r25, r25
 a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
 a30:	f9 2f       	mov	r31, r25
 a32:	96 e9       	ldi	r25, 0x96	; 150
 a34:	bb 27       	eor	r27, r27
 a36:	93 95       	inc	r25
 a38:	f6 95       	lsr	r31
 a3a:	87 95       	ror	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b7 95       	ror	r27
 a42:	f1 11       	cpse	r31, r1
 a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
 a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
 a48:	bb 0f       	add	r27, r27
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
 a5a:	88 23       	and	r24, r24
 a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
 a5e:	96 e9       	ldi	r25, 0x96	; 150
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
 a62:	77 23       	and	r23, r23
 a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
 a66:	9e e8       	ldi	r25, 0x8E	; 142
 a68:	87 2f       	mov	r24, r23
 a6a:	76 2f       	mov	r23, r22
 a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
 a6e:	66 23       	and	r22, r22
 a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
 a72:	96 e8       	ldi	r25, 0x86	; 134
 a74:	86 2f       	mov	r24, r22
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
 a7c:	9a 95       	dec	r25
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
 a86:	88 0f       	add	r24, r24
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__fp_inf>:
 a90:	97 f9       	bld	r25, 7
 a92:	9f 67       	ori	r25, 0x7F	; 127
 a94:	80 e8       	ldi	r24, 0x80	; 128
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	60 e0       	ldi	r22, 0x00	; 0
 a9a:	08 95       	ret

00000a9c <__fp_nan>:
 a9c:	9f ef       	ldi	r25, 0xFF	; 255
 a9e:	80 ec       	ldi	r24, 0xC0	; 192
 aa0:	08 95       	ret

00000aa2 <__fp_pscA>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	09 06       	cpc	r0, r25
 aae:	08 95       	ret

00000ab0 <__fp_pscB>:
 ab0:	00 24       	eor	r0, r0
 ab2:	0a 94       	dec	r0
 ab4:	12 16       	cp	r1, r18
 ab6:	13 06       	cpc	r1, r19
 ab8:	14 06       	cpc	r1, r20
 aba:	05 06       	cpc	r0, r21
 abc:	08 95       	ret

00000abe <__fp_round>:
 abe:	09 2e       	mov	r0, r25
 ac0:	03 94       	inc	r0
 ac2:	00 0c       	add	r0, r0
 ac4:	11 f4       	brne	.+4      	; 0xaca <__fp_round+0xc>
 ac6:	88 23       	and	r24, r24
 ac8:	52 f0       	brmi	.+20     	; 0xade <__fp_round+0x20>
 aca:	bb 0f       	add	r27, r27
 acc:	40 f4       	brcc	.+16     	; 0xade <__fp_round+0x20>
 ace:	bf 2b       	or	r27, r31
 ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0x18>
 ad2:	60 ff       	sbrs	r22, 0
 ad4:	04 c0       	rjmp	.+8      	; 0xade <__fp_round+0x20>
 ad6:	6f 5f       	subi	r22, 0xFF	; 255
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__fp_split3>:
 ae0:	57 fd       	sbrc	r21, 7
 ae2:	90 58       	subi	r25, 0x80	; 128
 ae4:	44 0f       	add	r20, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	59 f0       	breq	.+22     	; 0xb00 <__fp_splitA+0x10>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	71 f0       	breq	.+28     	; 0xb0a <__fp_splitA+0x1a>
 aee:	47 95       	ror	r20

00000af0 <__fp_splitA>:
 af0:	88 0f       	add	r24, r24
 af2:	97 fb       	bst	r25, 7
 af4:	99 1f       	adc	r25, r25
 af6:	61 f0       	breq	.+24     	; 0xb10 <__fp_splitA+0x20>
 af8:	9f 3f       	cpi	r25, 0xFF	; 255
 afa:	79 f0       	breq	.+30     	; 0xb1a <__fp_splitA+0x2a>
 afc:	87 95       	ror	r24
 afe:	08 95       	ret
 b00:	12 16       	cp	r1, r18
 b02:	13 06       	cpc	r1, r19
 b04:	14 06       	cpc	r1, r20
 b06:	55 1f       	adc	r21, r21
 b08:	f2 cf       	rjmp	.-28     	; 0xaee <__fp_split3+0xe>
 b0a:	46 95       	lsr	r20
 b0c:	f1 df       	rcall	.-30     	; 0xaf0 <__fp_splitA>
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__fp_splitA+0x30>
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	99 1f       	adc	r25, r25
 b18:	f1 cf       	rjmp	.-30     	; 0xafc <__fp_splitA+0xc>
 b1a:	86 95       	lsr	r24
 b1c:	71 05       	cpc	r23, r1
 b1e:	61 05       	cpc	r22, r1
 b20:	08 94       	sec
 b22:	08 95       	ret

00000b24 <__fp_zero>:
 b24:	e8 94       	clt

00000b26 <__fp_szero>:
 b26:	bb 27       	eor	r27, r27
 b28:	66 27       	eor	r22, r22
 b2a:	77 27       	eor	r23, r23
 b2c:	cb 01       	movw	r24, r22
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <__mulsf3>:
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 b36:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
 b3a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__mulsf3+0x1c>
 b40:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__mulsf3+0x1c>
 b46:	95 23       	and	r25, r21
 b48:	11 f0       	breq	.+4      	; 0xb4e <__mulsf3+0x1c>
 b4a:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 b4e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
 b52:	11 24       	eor	r1, r1
 b54:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>

00000b58 <__mulsf3x>:
 b58:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
 b5c:	70 f3       	brcs	.-36     	; 0xb3a <__mulsf3+0x8>

00000b5e <__mulsf3_pse>:
 b5e:	95 9f       	mul	r25, r21
 b60:	c1 f3       	breq	.-16     	; 0xb52 <__mulsf3+0x20>
 b62:	95 0f       	add	r25, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	55 1f       	adc	r21, r21
 b68:	62 9f       	mul	r22, r18
 b6a:	f0 01       	movw	r30, r0
 b6c:	72 9f       	mul	r23, r18
 b6e:	bb 27       	eor	r27, r27
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	63 9f       	mul	r22, r19
 b76:	aa 27       	eor	r26, r26
 b78:	f0 0d       	add	r31, r0
 b7a:	b1 1d       	adc	r27, r1
 b7c:	aa 1f       	adc	r26, r26
 b7e:	64 9f       	mul	r22, r20
 b80:	66 27       	eor	r22, r22
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	66 1f       	adc	r22, r22
 b88:	82 9f       	mul	r24, r18
 b8a:	22 27       	eor	r18, r18
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	73 9f       	mul	r23, r19
 b94:	b0 0d       	add	r27, r0
 b96:	a1 1d       	adc	r26, r1
 b98:	62 1f       	adc	r22, r18
 b9a:	83 9f       	mul	r24, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	22 1f       	adc	r18, r18
 ba2:	74 9f       	mul	r23, r20
 ba4:	33 27       	eor	r19, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	23 1f       	adc	r18, r19
 bac:	84 9f       	mul	r24, r20
 bae:	60 0d       	add	r22, r0
 bb0:	21 1d       	adc	r18, r1
 bb2:	82 2f       	mov	r24, r18
 bb4:	76 2f       	mov	r23, r22
 bb6:	6a 2f       	mov	r22, r26
 bb8:	11 24       	eor	r1, r1
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	9a f0       	brmi	.+38     	; 0xbe6 <__mulsf3_pse+0x88>
 bc0:	f1 f0       	breq	.+60     	; 0xbfe <__mulsf3_pse+0xa0>
 bc2:	88 23       	and	r24, r24
 bc4:	4a f0       	brmi	.+18     	; 0xbd8 <__mulsf3_pse+0x7a>
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	bb 1f       	adc	r27, r27
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__mulsf3_pse+0x64>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	80 f0       	brcs	.+32     	; 0xbfe <__mulsf3_pse+0xa0>
 bde:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 be2:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	e4 f3       	brlt	.-8      	; 0xbe2 <__mulsf3_pse+0x84>
 bea:	98 3e       	cpi	r25, 0xE8	; 232
 bec:	d4 f3       	brlt	.-12     	; 0xbe2 <__mulsf3_pse+0x84>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f7 95       	ror	r31
 bf8:	e7 95       	ror	r30
 bfa:	9f 5f       	subi	r25, 0xFF	; 255
 bfc:	c1 f7       	brne	.-16     	; 0xbee <__mulsf3_pse+0x90>
 bfe:	fe 2b       	or	r31, r30
 c00:	88 0f       	add	r24, r24
 c02:	91 1d       	adc	r25, r1
 c04:	96 95       	lsr	r25
 c06:	87 95       	ror	r24
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <pow>:
 c0c:	fa 01       	movw	r30, r20
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	30 96       	adiw	r30, 0x00	; 0
 c14:	21 05       	cpc	r18, r1
 c16:	31 05       	cpc	r19, r1
 c18:	a1 f1       	breq	.+104    	; 0xc82 <pow+0x76>
 c1a:	61 15       	cp	r22, r1
 c1c:	71 05       	cpc	r23, r1
 c1e:	61 f4       	brne	.+24     	; 0xc38 <pow+0x2c>
 c20:	80 38       	cpi	r24, 0x80	; 128
 c22:	bf e3       	ldi	r27, 0x3F	; 63
 c24:	9b 07       	cpc	r25, r27
 c26:	49 f1       	breq	.+82     	; 0xc7a <pow+0x6e>
 c28:	68 94       	set
 c2a:	90 38       	cpi	r25, 0x80	; 128
 c2c:	81 05       	cpc	r24, r1
 c2e:	61 f0       	breq	.+24     	; 0xc48 <pow+0x3c>
 c30:	80 38       	cpi	r24, 0x80	; 128
 c32:	bf ef       	ldi	r27, 0xFF	; 255
 c34:	9b 07       	cpc	r25, r27
 c36:	41 f0       	breq	.+16     	; 0xc48 <pow+0x3c>
 c38:	99 23       	and	r25, r25
 c3a:	4a f5       	brpl	.+82     	; 0xc8e <pow+0x82>
 c3c:	ff 3f       	cpi	r31, 0xFF	; 255
 c3e:	e1 05       	cpc	r30, r1
 c40:	31 05       	cpc	r19, r1
 c42:	21 05       	cpc	r18, r1
 c44:	19 f1       	breq	.+70     	; 0xc8c <pow+0x80>
 c46:	e8 94       	clt
 c48:	08 94       	sec
 c4a:	e7 95       	ror	r30
 c4c:	d9 01       	movw	r26, r18
 c4e:	aa 23       	and	r26, r26
 c50:	29 f4       	brne	.+10     	; 0xc5c <pow+0x50>
 c52:	ab 2f       	mov	r26, r27
 c54:	be 2f       	mov	r27, r30
 c56:	f8 5f       	subi	r31, 0xF8	; 248
 c58:	d0 f3       	brcs	.-12     	; 0xc4e <pow+0x42>
 c5a:	10 c0       	rjmp	.+32     	; 0xc7c <pow+0x70>
 c5c:	ff 5f       	subi	r31, 0xFF	; 255
 c5e:	70 f4       	brcc	.+28     	; 0xc7c <pow+0x70>
 c60:	a6 95       	lsr	r26
 c62:	e0 f7       	brcc	.-8      	; 0xc5c <pow+0x50>
 c64:	f7 39       	cpi	r31, 0x97	; 151
 c66:	50 f0       	brcs	.+20     	; 0xc7c <pow+0x70>
 c68:	19 f0       	breq	.+6      	; 0xc70 <pow+0x64>
 c6a:	ff 3a       	cpi	r31, 0xAF	; 175
 c6c:	38 f4       	brcc	.+14     	; 0xc7c <pow+0x70>
 c6e:	9f 77       	andi	r25, 0x7F	; 127
 c70:	9f 93       	push	r25
 c72:	0d d0       	rcall	.+26     	; 0xc8e <pow+0x82>
 c74:	0f 90       	pop	r0
 c76:	07 fc       	sbrc	r0, 7
 c78:	90 58       	subi	r25, 0x80	; 128
 c7a:	08 95       	ret
 c7c:	46 f0       	brts	.+16     	; 0xc8e <pow+0x82>
 c7e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	70 e0       	ldi	r23, 0x00	; 0
 c86:	80 e8       	ldi	r24, 0x80	; 128
 c88:	9f e3       	ldi	r25, 0x3F	; 63
 c8a:	08 95       	ret
 c8c:	4f e7       	ldi	r20, 0x7F	; 127
 c8e:	9f 77       	andi	r25, 0x7F	; 127
 c90:	5f 93       	push	r21
 c92:	4f 93       	push	r20
 c94:	3f 93       	push	r19
 c96:	2f 93       	push	r18
 c98:	0e 94 01 07 	call	0xe02	; 0xe02 <log>
 c9c:	2f 91       	pop	r18
 c9e:	3f 91       	pop	r19
 ca0:	4f 91       	pop	r20
 ca2:	5f 91       	pop	r21
 ca4:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 ca8:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <exp>
 cac:	29 f4       	brne	.+10     	; 0xcb8 <pow+0xac>
 cae:	16 f0       	brts	.+4      	; 0xcb4 <pow+0xa8>
 cb0:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 cb4:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
 cb8:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>

00000cbc <exp>:
 cbc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
 cc0:	a8 f3       	brcs	.-22     	; 0xcac <pow+0xa0>
 cc2:	96 38       	cpi	r25, 0x86	; 134
 cc4:	a0 f7       	brcc	.-24     	; 0xcae <pow+0xa2>
 cc6:	07 f8       	bld	r0, 7
 cc8:	0f 92       	push	r0
 cca:	e8 94       	clt
 ccc:	2b e3       	ldi	r18, 0x3B	; 59
 cce:	3a ea       	ldi	r19, 0xAA	; 170
 cd0:	48 eb       	ldi	r20, 0xB8	; 184
 cd2:	5f e7       	ldi	r21, 0x7F	; 127
 cd4:	0e 94 af 05 	call	0xb5e	; 0xb5e <__mulsf3_pse>
 cd8:	0f 92       	push	r0
 cda:	0f 92       	push	r0
 cdc:	0f 92       	push	r0
 cde:	4d b7       	in	r20, 0x3d	; 61
 ce0:	5e b7       	in	r21, 0x3e	; 62
 ce2:	0f 92       	push	r0
 ce4:	0e 94 49 07 	call	0xe92	; 0xe92 <modf>
 ce8:	e8 e6       	ldi	r30, 0x68	; 104
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_powser>
 cf0:	4f 91       	pop	r20
 cf2:	5f 91       	pop	r21
 cf4:	ef 91       	pop	r30
 cf6:	ff 91       	pop	r31
 cf8:	e5 95       	asr	r30
 cfa:	ee 1f       	adc	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	49 f0       	breq	.+18     	; 0xd12 <exp+0x56>
 d00:	fe 57       	subi	r31, 0x7E	; 126
 d02:	e0 68       	ori	r30, 0x80	; 128
 d04:	44 27       	eor	r20, r20
 d06:	ee 0f       	add	r30, r30
 d08:	44 1f       	adc	r20, r20
 d0a:	fa 95       	dec	r31
 d0c:	e1 f7       	brne	.-8      	; 0xd06 <exp+0x4a>
 d0e:	41 95       	neg	r20
 d10:	55 0b       	sbc	r21, r21
 d12:	0e 94 c3 06 	call	0xd86	; 0xd86 <ldexp>
 d16:	0f 90       	pop	r0
 d18:	07 fe       	sbrs	r0, 7
 d1a:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <inverse>
 d1e:	08 95       	ret

00000d20 <__fp_powser>:
 d20:	df 93       	push	r29
 d22:	cf 93       	push	r28
 d24:	1f 93       	push	r17
 d26:	0f 93       	push	r16
 d28:	ff 92       	push	r15
 d2a:	ef 92       	push	r14
 d2c:	df 92       	push	r13
 d2e:	7b 01       	movw	r14, r22
 d30:	8c 01       	movw	r16, r24
 d32:	68 94       	set
 d34:	06 c0       	rjmp	.+12     	; 0xd42 <__fp_powser+0x22>
 d36:	da 2e       	mov	r13, r26
 d38:	ef 01       	movw	r28, r30
 d3a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 d3e:	fe 01       	movw	r30, r28
 d40:	e8 94       	clt
 d42:	a5 91       	lpm	r26, Z+
 d44:	25 91       	lpm	r18, Z+
 d46:	35 91       	lpm	r19, Z+
 d48:	45 91       	lpm	r20, Z+
 d4a:	55 91       	lpm	r21, Z+
 d4c:	a6 f3       	brts	.-24     	; 0xd36 <__fp_powser+0x16>
 d4e:	ef 01       	movw	r28, r30
 d50:	0e 94 80 04 	call	0x900	; 0x900 <__addsf3x>
 d54:	fe 01       	movw	r30, r28
 d56:	97 01       	movw	r18, r14
 d58:	a8 01       	movw	r20, r16
 d5a:	da 94       	dec	r13
 d5c:	69 f7       	brne	.-38     	; 0xd38 <__fp_powser+0x18>
 d5e:	df 90       	pop	r13
 d60:	ef 90       	pop	r14
 d62:	ff 90       	pop	r15
 d64:	0f 91       	pop	r16
 d66:	1f 91       	pop	r17
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	08 95       	ret

00000d6e <inverse>:
 d6e:	9b 01       	movw	r18, r22
 d70:	ac 01       	movw	r20, r24
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	70 e0       	ldi	r23, 0x00	; 0
 d76:	80 e8       	ldi	r24, 0x80	; 128
 d78:	9f e3       	ldi	r25, 0x3F	; 63
 d7a:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__divsf3>
 d7e:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 d82:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_mpack>

00000d86 <ldexp>:
 d86:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
 d8a:	d8 f3       	brcs	.-10     	; 0xd82 <inverse+0x14>
 d8c:	99 23       	and	r25, r25
 d8e:	c9 f3       	breq	.-14     	; 0xd82 <inverse+0x14>
 d90:	94 0f       	add	r25, r20
 d92:	51 1d       	adc	r21, r1
 d94:	a3 f3       	brvs	.-24     	; 0xd7e <inverse+0x10>
 d96:	91 50       	subi	r25, 0x01	; 1
 d98:	50 40       	sbci	r21, 0x00	; 0
 d9a:	94 f0       	brlt	.+36     	; 0xdc0 <ldexp+0x3a>
 d9c:	59 f0       	breq	.+22     	; 0xdb4 <ldexp+0x2e>
 d9e:	88 23       	and	r24, r24
 da0:	32 f0       	brmi	.+12     	; 0xdae <ldexp+0x28>
 da2:	66 0f       	add	r22, r22
 da4:	77 1f       	adc	r23, r23
 da6:	88 1f       	adc	r24, r24
 da8:	91 50       	subi	r25, 0x01	; 1
 daa:	50 40       	sbci	r21, 0x00	; 0
 dac:	c1 f7       	brne	.-16     	; 0xd9e <ldexp+0x18>
 dae:	9e 3f       	cpi	r25, 0xFE	; 254
 db0:	51 05       	cpc	r21, r1
 db2:	2c f7       	brge	.-54     	; 0xd7e <inverse+0x10>
 db4:	88 0f       	add	r24, r24
 db6:	91 1d       	adc	r25, r1
 db8:	96 95       	lsr	r25
 dba:	87 95       	ror	r24
 dbc:	97 f9       	bld	r25, 7
 dbe:	08 95       	ret
 dc0:	5f 3f       	cpi	r21, 0xFF	; 255
 dc2:	ac f0       	brlt	.+42     	; 0xdee <ldexp+0x68>
 dc4:	98 3e       	cpi	r25, 0xE8	; 232
 dc6:	9c f0       	brlt	.+38     	; 0xdee <ldexp+0x68>
 dc8:	bb 27       	eor	r27, r27
 dca:	86 95       	lsr	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	b7 95       	ror	r27
 dd2:	08 f4       	brcc	.+2      	; 0xdd6 <ldexp+0x50>
 dd4:	b1 60       	ori	r27, 0x01	; 1
 dd6:	93 95       	inc	r25
 dd8:	c1 f7       	brne	.-16     	; 0xdca <ldexp+0x44>
 dda:	bb 0f       	add	r27, r27
 ddc:	58 f7       	brcc	.-42     	; 0xdb4 <ldexp+0x2e>
 dde:	11 f4       	brne	.+4      	; 0xde4 <ldexp+0x5e>
 de0:	60 ff       	sbrs	r22, 0
 de2:	e8 cf       	rjmp	.-48     	; 0xdb4 <ldexp+0x2e>
 de4:	6f 5f       	subi	r22, 0xFF	; 255
 de6:	7f 4f       	sbci	r23, 0xFF	; 255
 de8:	8f 4f       	sbci	r24, 0xFF	; 255
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	e3 cf       	rjmp	.-58     	; 0xdb4 <ldexp+0x2e>
 dee:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 df2:	16 f0       	brts	.+4      	; 0xdf8 <ldexp+0x72>
 df4:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_mpack>
 df8:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
 dfc:	68 94       	set
 dfe:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>

00000e02 <log>:
 e02:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
 e06:	a8 f3       	brcs	.-22     	; 0xdf2 <ldexp+0x6c>
 e08:	99 23       	and	r25, r25
 e0a:	c1 f3       	breq	.-16     	; 0xdfc <ldexp+0x76>
 e0c:	ae f3       	brts	.-22     	; 0xdf8 <ldexp+0x72>
 e0e:	df 93       	push	r29
 e10:	cf 93       	push	r28
 e12:	1f 93       	push	r17
 e14:	0f 93       	push	r16
 e16:	ff 92       	push	r15
 e18:	c9 2f       	mov	r28, r25
 e1a:	dd 27       	eor	r29, r29
 e1c:	88 23       	and	r24, r24
 e1e:	2a f0       	brmi	.+10     	; 0xe2a <log+0x28>
 e20:	21 97       	sbiw	r28, 0x01	; 1
 e22:	66 0f       	add	r22, r22
 e24:	77 1f       	adc	r23, r23
 e26:	88 1f       	adc	r24, r24
 e28:	da f7       	brpl	.-10     	; 0xe20 <log+0x1e>
 e2a:	20 e0       	ldi	r18, 0x00	; 0
 e2c:	30 e0       	ldi	r19, 0x00	; 0
 e2e:	40 e8       	ldi	r20, 0x80	; 128
 e30:	5f eb       	ldi	r21, 0xBF	; 191
 e32:	9f e3       	ldi	r25, 0x3F	; 63
 e34:	88 39       	cpi	r24, 0x98	; 152
 e36:	20 f0       	brcs	.+8      	; 0xe40 <log+0x3e>
 e38:	80 3e       	cpi	r24, 0xE0	; 224
 e3a:	38 f0       	brcs	.+14     	; 0xe4a <log+0x48>
 e3c:	21 96       	adiw	r28, 0x01	; 1
 e3e:	8f 77       	andi	r24, 0x7F	; 127
 e40:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__addsf3>
 e44:	e0 e9       	ldi	r30, 0x90	; 144
 e46:	f0 e0       	ldi	r31, 0x00	; 0
 e48:	04 c0       	rjmp	.+8      	; 0xe52 <log+0x50>
 e4a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__addsf3>
 e4e:	ed eb       	ldi	r30, 0xBD	; 189
 e50:	f0 e0       	ldi	r31, 0x00	; 0
 e52:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_powser>
 e56:	8b 01       	movw	r16, r22
 e58:	be 01       	movw	r22, r28
 e5a:	ec 01       	movw	r28, r24
 e5c:	fb 2e       	mov	r15, r27
 e5e:	6f 57       	subi	r22, 0x7F	; 127
 e60:	71 09       	sbc	r23, r1
 e62:	75 95       	asr	r23
 e64:	77 1f       	adc	r23, r23
 e66:	88 0b       	sbc	r24, r24
 e68:	99 0b       	sbc	r25, r25
 e6a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
 e6e:	28 e1       	ldi	r18, 0x18	; 24
 e70:	32 e7       	ldi	r19, 0x72	; 114
 e72:	41 e3       	ldi	r20, 0x31	; 49
 e74:	5f e3       	ldi	r21, 0x3F	; 63
 e76:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 e7a:	af 2d       	mov	r26, r15
 e7c:	98 01       	movw	r18, r16
 e7e:	ae 01       	movw	r20, r28
 e80:	ff 90       	pop	r15
 e82:	0f 91       	pop	r16
 e84:	1f 91       	pop	r17
 e86:	cf 91       	pop	r28
 e88:	df 91       	pop	r29
 e8a:	0e 94 80 04 	call	0x900	; 0x900 <__addsf3x>
 e8e:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>

00000e92 <modf>:
 e92:	fa 01       	movw	r30, r20
 e94:	dc 01       	movw	r26, r24
 e96:	aa 0f       	add	r26, r26
 e98:	bb 1f       	adc	r27, r27
 e9a:	9b 01       	movw	r18, r22
 e9c:	ac 01       	movw	r20, r24
 e9e:	bf 57       	subi	r27, 0x7F	; 127
 ea0:	28 f4       	brcc	.+10     	; 0xeac <modf+0x1a>
 ea2:	22 27       	eor	r18, r18
 ea4:	33 27       	eor	r19, r19
 ea6:	44 27       	eor	r20, r20
 ea8:	50 78       	andi	r21, 0x80	; 128
 eaa:	20 c0       	rjmp	.+64     	; 0xeec <modf+0x5a>
 eac:	b7 51       	subi	r27, 0x17	; 23
 eae:	90 f4       	brcc	.+36     	; 0xed4 <modf+0x42>
 eb0:	ab 2f       	mov	r26, r27
 eb2:	00 24       	eor	r0, r0
 eb4:	46 95       	lsr	r20
 eb6:	37 95       	ror	r19
 eb8:	27 95       	ror	r18
 eba:	01 1c       	adc	r0, r1
 ebc:	a3 95       	inc	r26
 ebe:	d2 f3       	brmi	.-12     	; 0xeb4 <modf+0x22>
 ec0:	00 20       	and	r0, r0
 ec2:	71 f0       	breq	.+28     	; 0xee0 <modf+0x4e>
 ec4:	22 0f       	add	r18, r18
 ec6:	33 1f       	adc	r19, r19
 ec8:	44 1f       	adc	r20, r20
 eca:	b3 95       	inc	r27
 ecc:	da f3       	brmi	.-10     	; 0xec4 <modf+0x32>
 ece:	0e d0       	rcall	.+28     	; 0xeec <modf+0x5a>
 ed0:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__subsf3>
 ed4:	61 30       	cpi	r22, 0x01	; 1
 ed6:	71 05       	cpc	r23, r1
 ed8:	a0 e8       	ldi	r26, 0x80	; 128
 eda:	8a 07       	cpc	r24, r26
 edc:	b9 46       	sbci	r27, 0x69	; 105
 ede:	30 f4       	brcc	.+12     	; 0xeec <modf+0x5a>
 ee0:	9b 01       	movw	r18, r22
 ee2:	ac 01       	movw	r20, r24
 ee4:	66 27       	eor	r22, r22
 ee6:	77 27       	eor	r23, r23
 ee8:	88 27       	eor	r24, r24
 eea:	90 78       	andi	r25, 0x80	; 128
 eec:	30 96       	adiw	r30, 0x00	; 0
 eee:	21 f0       	breq	.+8      	; 0xef8 <modf+0x66>
 ef0:	20 83       	st	Z, r18
 ef2:	31 83       	std	Z+1, r19	; 0x01
 ef4:	42 83       	std	Z+2, r20	; 0x02
 ef6:	53 83       	std	Z+3, r21	; 0x03
 ef8:	08 95       	ret

00000efa <__divsf3>:
 efa:	0e 94 91 07 	call	0xf22	; 0xf22 <__divsf3x>
 efe:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
 f02:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
 f06:	58 f0       	brcs	.+22     	; 0xf1e <__divsf3+0x24>
 f08:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
 f0c:	40 f0       	brcs	.+16     	; 0xf1e <__divsf3+0x24>
 f0e:	29 f4       	brne	.+10     	; 0xf1a <__divsf3+0x20>
 f10:	5f 3f       	cpi	r21, 0xFF	; 255
 f12:	29 f0       	breq	.+10     	; 0xf1e <__divsf3+0x24>
 f14:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 f18:	51 11       	cpse	r21, r1
 f1a:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 f1e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>

00000f22 <__divsf3x>:
 f22:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
 f26:	68 f3       	brcs	.-38     	; 0xf02 <__divsf3+0x8>

00000f28 <__divsf3_pse>:
 f28:	99 23       	and	r25, r25
 f2a:	b1 f3       	breq	.-20     	; 0xf18 <__divsf3+0x1e>
 f2c:	55 23       	and	r21, r21
 f2e:	91 f3       	breq	.-28     	; 0xf14 <__divsf3+0x1a>
 f30:	95 1b       	sub	r25, r21
 f32:	55 0b       	sbc	r21, r21
 f34:	bb 27       	eor	r27, r27
 f36:	aa 27       	eor	r26, r26
 f38:	62 17       	cp	r22, r18
 f3a:	73 07       	cpc	r23, r19
 f3c:	84 07       	cpc	r24, r20
 f3e:	38 f0       	brcs	.+14     	; 0xf4e <__divsf3_pse+0x26>
 f40:	9f 5f       	subi	r25, 0xFF	; 255
 f42:	5f 4f       	sbci	r21, 0xFF	; 255
 f44:	22 0f       	add	r18, r18
 f46:	33 1f       	adc	r19, r19
 f48:	44 1f       	adc	r20, r20
 f4a:	aa 1f       	adc	r26, r26
 f4c:	a9 f3       	breq	.-22     	; 0xf38 <__divsf3_pse+0x10>
 f4e:	35 d0       	rcall	.+106    	; 0xfba <__divsf3_pse+0x92>
 f50:	0e 2e       	mov	r0, r30
 f52:	3a f0       	brmi	.+14     	; 0xf62 <__divsf3_pse+0x3a>
 f54:	e0 e8       	ldi	r30, 0x80	; 128
 f56:	32 d0       	rcall	.+100    	; 0xfbc <__divsf3_pse+0x94>
 f58:	91 50       	subi	r25, 0x01	; 1
 f5a:	50 40       	sbci	r21, 0x00	; 0
 f5c:	e6 95       	lsr	r30
 f5e:	00 1c       	adc	r0, r0
 f60:	ca f7       	brpl	.-14     	; 0xf54 <__divsf3_pse+0x2c>
 f62:	2b d0       	rcall	.+86     	; 0xfba <__divsf3_pse+0x92>
 f64:	fe 2f       	mov	r31, r30
 f66:	29 d0       	rcall	.+82     	; 0xfba <__divsf3_pse+0x92>
 f68:	66 0f       	add	r22, r22
 f6a:	77 1f       	adc	r23, r23
 f6c:	88 1f       	adc	r24, r24
 f6e:	bb 1f       	adc	r27, r27
 f70:	26 17       	cp	r18, r22
 f72:	37 07       	cpc	r19, r23
 f74:	48 07       	cpc	r20, r24
 f76:	ab 07       	cpc	r26, r27
 f78:	b0 e8       	ldi	r27, 0x80	; 128
 f7a:	09 f0       	breq	.+2      	; 0xf7e <__divsf3_pse+0x56>
 f7c:	bb 0b       	sbc	r27, r27
 f7e:	80 2d       	mov	r24, r0
 f80:	bf 01       	movw	r22, r30
 f82:	ff 27       	eor	r31, r31
 f84:	93 58       	subi	r25, 0x83	; 131
 f86:	5f 4f       	sbci	r21, 0xFF	; 255
 f88:	3a f0       	brmi	.+14     	; 0xf98 <__divsf3_pse+0x70>
 f8a:	9e 3f       	cpi	r25, 0xFE	; 254
 f8c:	51 05       	cpc	r21, r1
 f8e:	78 f0       	brcs	.+30     	; 0xfae <__divsf3_pse+0x86>
 f90:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
 f94:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
 f98:	5f 3f       	cpi	r21, 0xFF	; 255
 f9a:	e4 f3       	brlt	.-8      	; 0xf94 <__divsf3_pse+0x6c>
 f9c:	98 3e       	cpi	r25, 0xE8	; 232
 f9e:	d4 f3       	brlt	.-12     	; 0xf94 <__divsf3_pse+0x6c>
 fa0:	86 95       	lsr	r24
 fa2:	77 95       	ror	r23
 fa4:	67 95       	ror	r22
 fa6:	b7 95       	ror	r27
 fa8:	f7 95       	ror	r31
 faa:	9f 5f       	subi	r25, 0xFF	; 255
 fac:	c9 f7       	brne	.-14     	; 0xfa0 <__divsf3_pse+0x78>
 fae:	88 0f       	add	r24, r24
 fb0:	91 1d       	adc	r25, r1
 fb2:	96 95       	lsr	r25
 fb4:	87 95       	ror	r24
 fb6:	97 f9       	bld	r25, 7
 fb8:	08 95       	ret
 fba:	e1 e0       	ldi	r30, 0x01	; 1
 fbc:	66 0f       	add	r22, r22
 fbe:	77 1f       	adc	r23, r23
 fc0:	88 1f       	adc	r24, r24
 fc2:	bb 1f       	adc	r27, r27
 fc4:	62 17       	cp	r22, r18
 fc6:	73 07       	cpc	r23, r19
 fc8:	84 07       	cpc	r24, r20
 fca:	ba 07       	cpc	r27, r26
 fcc:	20 f0       	brcs	.+8      	; 0xfd6 <__divsf3_pse+0xae>
 fce:	62 1b       	sub	r22, r18
 fd0:	73 0b       	sbc	r23, r19
 fd2:	84 0b       	sbc	r24, r20
 fd4:	ba 0b       	sbc	r27, r26
 fd6:	ee 1f       	adc	r30, r30
 fd8:	88 f7       	brcc	.-30     	; 0xfbc <__divsf3_pse+0x94>
 fda:	e0 95       	com	r30
 fdc:	08 95       	ret

00000fde <__fp_mpack>:
 fde:	9f 3f       	cpi	r25, 0xFF	; 255
 fe0:	31 f0       	breq	.+12     	; 0xfee <__fp_mpack_finite+0xc>

00000fe2 <__fp_mpack_finite>:
 fe2:	91 50       	subi	r25, 0x01	; 1
 fe4:	20 f4       	brcc	.+8      	; 0xfee <__fp_mpack_finite+0xc>
 fe6:	87 95       	ror	r24
 fe8:	77 95       	ror	r23
 fea:	67 95       	ror	r22
 fec:	b7 95       	ror	r27
 fee:	88 0f       	add	r24, r24
 ff0:	91 1d       	adc	r25, r1
 ff2:	96 95       	lsr	r25
 ff4:	87 95       	ror	r24
 ff6:	97 f9       	bld	r25, 7
 ff8:	08 95       	ret

00000ffa <_exit>:
 ffa:	f8 94       	cli

00000ffc <__stop_program>:
 ffc:	ff cf       	rjmp	.-2      	; 0xffc <__stop_program>
