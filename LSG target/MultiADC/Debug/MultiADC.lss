
MultiADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000004b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5d  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ca  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d0  00000000  00000000  00002215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000024e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	19 d0       	rcall	.+50     	; 0xdc <main>
  aa:	c8 c1       	rjmp	.+912    	; 0x43c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <InitializeTimer1>:
#include <util/delay.h>

void InitializeTimer1(void)
{
	// 모드 14, 고속 PWM 모드
	TCCR3A |= (1 << WGM31);
  ae:	ab e8       	ldi	r26, 0x8B	; 139
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM32) | (1 << WGM33);
  b8:	ea e8       	ldi	r30, 0x8A	; 138
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 61       	ori	r24, 0x18	; 24
  c0:	80 83       	st	Z, r24
	
	// 비반전 모드
	// TOP : ICR1, 비교일치값 : OCR1A 레지스터
	TCCR3A |= (1 << COM3A1) | (1 << COM3B1);
  c2:	8c 91       	ld	r24, X
  c4:	80 6a       	ori	r24, 0xA0	; 160
  c6:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS31);		// 분주율 8, 2MHz
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	ICR3 = 39999;				// 20ms 주기
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  da:	08 95       	ret

000000dc <main>:
int read, i, j, k, cnt;
int adc_select = 0;

int main(void)
{
	UBRR0H = 0x00; // 9,600 BAUD rate
  dc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	89 b9       	out	0x09, r24	; 9
	UCSR0A |= 0x02; // 2배속 모드
  e4:	59 9a       	sbi	0x0b, 1	; 11
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
  e6:	e5 e9       	ldi	r30, 0x95	; 149
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	UCSR0B |= 0x18;
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	8a b9       	out	0x0a, r24	; 10
	
	ADCSRA |= 0xA7;			// 분주비 설정, ADC 활성화, 프리 러닝 모드
  f6:	86 b1       	in	r24, 0x06	; 6
  f8:	87 6a       	ori	r24, 0xA7	; 167
  fa:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 0x40;
  fc:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 0x40;			// 변환 시작
  fe:	36 9a       	sbi	0x06, 6	; 6
	
	// 모터 제어 핀을 출력으로 설정
	DDRE |= (1 << PE3) | (1 << PE4);
 100:	82 b1       	in	r24, 0x02	; 2
 102:	88 61       	ori	r24, 0x18	; 24
 104:	82 b9       	out	0x02, r24	; 2
	InitializeTimer1();			// 1번 타이머/카운터 설정
 106:	d3 df       	rcall	.-90     	; 0xae <InitializeTimer1>
	OCR3A = 2800;
 108:	80 ef       	ldi	r24, 0xF0	; 240
 10a:	9a e0       	ldi	r25, 0x0A	; 10
 10c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 110:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 2800;
 114:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 118:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
    while (1)
	{
		ADMUX = 0x40 + adc_select; // use AVCC as a standard voltage
 11c:	e0 e0       	ldi	r30, 0x00	; 0
 11e:	f1 e0       	ldi	r31, 0x01	; 1
			//while( !(UCSR0A & (1 << UDRE0)) ); // 송신 가능 대기
			for(i = 0; read - i*1000 >= 1000; i++);
			UDR0 = i + 48; //1000s, thousands
			_delay_ms(10);
			
			for(j = 0; read - i*1000 - j*100 >= 100; j++);
 120:	28 e1       	ldi	r18, 0x18	; 24
 122:	3c ef       	ldi	r19, 0xFC	; 252
			UDR0 = j + 48; //100s, hundreds
			_delay_ms(10);
			
			for(k = 0; read - i*1000 - j*100 - k*10 >= 10; k++);
 124:	0f 2e       	mov	r0, r31
 126:	fc e9       	ldi	r31, 0x9C	; 156
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
			UDR0 = k + 48; //10s, tens
			_delay_ms(10);
			
			UDR0 = read - i*1000 - j*100 - k*10 + 48; //1s, units
 12c:	0f 2e       	mov	r0, r31
 12e:	f8 e1       	ldi	r31, 0x18	; 24
 130:	af 2e       	mov	r10, r31
 132:	f0 2d       	mov	r31, r0
 134:	c2 e0       	ldi	r28, 0x02	; 2
 136:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else if(adc_select == 3 && read < 1450)
		{
			for(cnt = 0; cnt < 100; cnt++)
			{
				UDR0 = 122;
 138:	0f 2e       	mov	r0, r31
 13a:	fa e7       	ldi	r31, 0x7A	; 122
 13c:	bf 2e       	mov	r11, r31
 13e:	f0 2d       	mov	r31, r0
				_delay_ms(10);
			}
			OCR3B = 4000;
 140:	0f 2e       	mov	r0, r31
 142:	f4 e8       	ldi	r31, 0x84	; 132
 144:	2f 2e       	mov	r2, r31
 146:	31 2c       	mov	r3, r1
 148:	f0 2d       	mov	r31, r0
 14a:	0f 2e       	mov	r0, r31
 14c:	f0 ea       	ldi	r31, 0xA0	; 160
 14e:	6f 2e       	mov	r6, r31
 150:	ff e0       	ldi	r31, 0x0F	; 15
 152:	7f 2e       	mov	r7, r31
 154:	f0 2d       	mov	r31, r0
			_delay_ms(1000);
			OCR3B = 2700;
 156:	0f 2e       	mov	r0, r31
 158:	fc e8       	ldi	r31, 0x8C	; 140
 15a:	4f 2e       	mov	r4, r31
 15c:	fa e0       	ldi	r31, 0x0A	; 10
 15e:	5f 2e       	mov	r5, r31
 160:	f0 2d       	mov	r31, r0
		}
		else if(adc_select == 2 && read < 1450)
		{
			for(cnt = 0; cnt < 100; cnt++)
			{
				UDR0 = 121;
 162:	0f 2e       	mov	r0, r31
 164:	f9 e7       	ldi	r31, 0x79	; 121
 166:	ef 2e       	mov	r14, r31
 168:	f0 2d       	mov	r31, r0
				_delay_ms(10);
			}
			OCR3A = 4000;
 16a:	0f 2e       	mov	r0, r31
 16c:	f6 e8       	ldi	r31, 0x86	; 134
 16e:	8f 2e       	mov	r8, r31
 170:	91 2c       	mov	r9, r1
 172:	f0 2d       	mov	r31, r0
	OCR3A = 2800;
	OCR3B = 2800;
	
    while (1)
	{
		ADMUX = 0x40 + adc_select; // use AVCC as a standard voltage
 174:	80 81       	ld	r24, Z
 176:	80 5c       	subi	r24, 0xC0	; 192
 178:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9c e9       	ldi	r25, 0x9C	; 156
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xa2>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0xa8>
 184:	00 00       	nop
		// 0x40 = ADC0, 0x41 = ADC1, 0x42 = ADC2, 0x43 = ADC3
		_delay_ms(10);
		
		while(!(ADCSRA & 0x10));	// 변환 종료 대기
 186:	34 9b       	sbis	0x06, 4	; 6
 188:	fe cf       	rjmp	.-4      	; 0x186 <main+0xaa>
		read = ADC + 1000; // 1000 ~ 2023
 18a:	84 b1       	in	r24, 0x04	; 4
 18c:	95 b1       	in	r25, 0x05	; 5
 18e:	88 51       	subi	r24, 0x18	; 24
 190:	9c 4f       	sbci	r25, 0xFC	; 252
 192:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <read+0x1>
 196:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <read>
 19a:	af e3       	ldi	r26, 0x3F	; 63
 19c:	bc e9       	ldi	r27, 0x9C	; 156
 19e:	11 97       	sbiw	r26, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0xc2>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xc8>
 1a4:	00 00       	nop
		_delay_ms(10);
		
		//while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = 33 + adc_select;
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 5d       	subi	r24, 0xDF	; 223
 1aa:	8c b9       	out	0x0c, r24	; 12
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9c e9       	ldi	r25, 0x9C	; 156
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xd4>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xda>
 1b6:	00 00       	nop
		_delay_ms(10);
		
		if(adc_select == 0 && read < 1450)
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <main+0xfa>
 1c4:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <read>
 1c8:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <read+0x1>
 1cc:	0a 3a       	cpi	r16, 0xAA	; 170
 1ce:	15 40       	sbci	r17, 0x05	; 5
 1d0:	0c f4       	brge	.+2      	; 0x1d4 <main+0xf8>
 1d2:	2e c1       	rjmp	.+604    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 1d4:	72 c0       	rjmp	.+228    	; 0x2ba <main+0x1de>
			{
				UDR0 = 119;
				_delay_ms(10);
			}*/
		}
		else if(adc_select == 1 && read < 1450)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	49 f4       	brne	.+18     	; 0x1ee <main+0x112>
 1dc:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <read>
 1e0:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <read+0x1>
 1e4:	0a 3a       	cpi	r16, 0xAA	; 170
 1e6:	15 40       	sbci	r17, 0x05	; 5
 1e8:	0c f4       	brge	.+2      	; 0x1ec <main+0x110>
 1ea:	22 c1       	rjmp	.+580    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 1ec:	66 c0       	rjmp	.+204    	; 0x2ba <main+0x1de>
			{
				UDR0 = 120;
				_delay_ms(10);
			}*/
		}
		else if(adc_select == 2 && read < 1450)
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	91 05       	cpc	r25, r1
 1f2:	89 f5       	brne	.+98     	; 0x256 <main+0x17a>
 1f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <read>
 1f8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <read+0x1>
 1fc:	8a 3a       	cpi	r24, 0xAA	; 170
 1fe:	95 40       	sbci	r25, 0x05	; 5
 200:	0c f0       	brlt	.+2      	; 0x204 <main+0x128>
 202:	5b c0       	rjmp	.+182    	; 0x2ba <main+0x1de>
		{
			for(cnt = 0; cnt < 100; cnt++)
 204:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt+0x1>
 208:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cnt>
			{
				UDR0 = 121;
 20c:	ec b8       	out	0x0c, r14	; 12
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9c e9       	ldi	r25, 0x9C	; 156
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x136>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x13c>
 218:	00 00       	nop
				_delay_ms(10);
			}*/
		}
		else if(adc_select == 2 && read < 1450)
		{
			for(cnt = 0; cnt < 100; cnt++)
 21a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cnt>
 21e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cnt+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cnt+0x1>
 228:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cnt>
 22c:	84 36       	cpi	r24, 0x64	; 100
 22e:	91 05       	cpc	r25, r1
 230:	6c f3       	brlt	.-38     	; 0x20c <main+0x130>
			{
				UDR0 = 121;
				_delay_ms(10);
			}
			OCR3A = 4000;
 232:	d4 01       	movw	r26, r8
 234:	11 96       	adiw	r26, 0x01	; 1
 236:	7c 92       	st	X, r7
 238:	6e 92       	st	-X, r6
 23a:	bf ef       	ldi	r27, 0xFF	; 255
 23c:	43 ed       	ldi	r20, 0xD3	; 211
 23e:	50 e3       	ldi	r21, 0x30	; 48
 240:	b1 50       	subi	r27, 0x01	; 1
 242:	40 40       	sbci	r20, 0x00	; 0
 244:	50 40       	sbci	r21, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x164>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x16e>
 24a:	00 00       	nop
			_delay_ms(1000);
			OCR3A = 2700;
 24c:	d4 01       	movw	r26, r8
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	5c 92       	st	X, r5
 252:	4e 92       	st	-X, r4
 254:	e1 c0       	rjmp	.+450    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		}
		else if(adc_select == 3 && read < 1450)
 256:	03 97       	sbiw	r24, 0x03	; 3
 258:	81 f5       	brne	.+96     	; 0x2ba <main+0x1de>
 25a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <read>
 25e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <read+0x1>
 262:	8a 3a       	cpi	r24, 0xAA	; 170
 264:	95 40       	sbci	r25, 0x05	; 5
 266:	4c f5       	brge	.+82     	; 0x2ba <main+0x1de>
		{
			for(cnt = 0; cnt < 100; cnt++)
 268:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt+0x1>
 26c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cnt>
			{
				UDR0 = 122;
 270:	bc b8       	out	0x0c, r11	; 12
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9c e9       	ldi	r25, 0x9C	; 156
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x19a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x1a0>
 27c:	00 00       	nop
			_delay_ms(1000);
			OCR3A = 2700;
		}
		else if(adc_select == 3 && read < 1450)
		{
			for(cnt = 0; cnt < 100; cnt++)
 27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cnt>
 282:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cnt+0x1>
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cnt+0x1>
 28c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cnt>
 290:	84 36       	cpi	r24, 0x64	; 100
 292:	91 05       	cpc	r25, r1
 294:	6c f3       	brlt	.-38     	; 0x270 <main+0x194>
			{
				UDR0 = 122;
				_delay_ms(10);
			}
			OCR3B = 4000;
 296:	d1 01       	movw	r26, r2
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	7c 92       	st	X, r7
 29c:	6e 92       	st	-X, r6
 29e:	bf ef       	ldi	r27, 0xFF	; 255
 2a0:	43 ed       	ldi	r20, 0xD3	; 211
 2a2:	50 e3       	ldi	r21, 0x30	; 48
 2a4:	b1 50       	subi	r27, 0x01	; 1
 2a6:	40 40       	sbci	r20, 0x00	; 0
 2a8:	50 40       	sbci	r21, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x1c8>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x1d2>
 2ae:	00 00       	nop
			_delay_ms(1000);
			OCR3B = 2700;
 2b0:	d1 01       	movw	r26, r2
 2b2:	11 96       	adiw	r26, 0x01	; 1
 2b4:	5c 92       	st	X, r5
 2b6:	4e 92       	st	-X, r4
 2b8:	af c0       	rjmp	.+350    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		}
		else
		{
			//while( !(UCSR0A & (1 << UDRE0)) ); // 송신 가능 대기
			for(i = 0; read - i*1000 >= 1000; i++);
 2ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i+0x1>
 2be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <i>
 2c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <read>
 2c6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <read+0x1>
 2ca:	88 3e       	cpi	r24, 0xE8	; 232
 2cc:	b3 e0       	ldi	r27, 0x03	; 3
 2ce:	9b 07       	cpc	r25, r27
 2d0:	7c f0       	brlt	.+30     	; 0x2f0 <main+0x214>
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	0f 5f       	subi	r16, 0xFF	; 255
 2d8:	1f 4f       	sbci	r17, 0xFF	; 255
 2da:	88 5e       	subi	r24, 0xE8	; 232
 2dc:	93 40       	sbci	r25, 0x03	; 3
 2de:	88 3e       	cpi	r24, 0xE8	; 232
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	94 07       	cpc	r25, r20
 2e4:	c4 f7       	brge	.-16     	; 0x2d6 <main+0x1fa>
 2e6:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <i+0x1>
 2ea:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <i>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <main+0x218>
 2f0:	00 e0       	ldi	r16, 0x00	; 0
 2f2:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = i + 48; //1000s, thousands
 2f4:	00 5d       	subi	r16, 0xD0	; 208
 2f6:	0c b9       	out	0x0c, r16	; 12
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9c e9       	ldi	r25, 0x9C	; 156
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x220>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x226>
 302:	00 00       	nop
			_delay_ms(10);
			
			for(j = 0; read - i*1000 - j*100 >= 100; j++);
 304:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <j+0x1>
 308:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <j>
 30c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <i>
 310:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <i+0x1>
 314:	82 9f       	mul	r24, r18
 316:	80 01       	movw	r16, r0
 318:	83 9f       	mul	r24, r19
 31a:	10 0d       	add	r17, r0
 31c:	92 9f       	mul	r25, r18
 31e:	10 0d       	add	r17, r0
 320:	11 24       	eor	r1, r1
 322:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <read>
 326:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <read+0x1>
 32a:	80 0f       	add	r24, r16
 32c:	91 1f       	adc	r25, r17
 32e:	84 36       	cpi	r24, 0x64	; 100
 330:	91 05       	cpc	r25, r1
 332:	74 f0       	brlt	.+28     	; 0x350 <main+0x274>
 334:	00 e0       	ldi	r16, 0x00	; 0
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	84 56       	subi	r24, 0x64	; 100
 33e:	91 09       	sbc	r25, r1
 340:	84 36       	cpi	r24, 0x64	; 100
 342:	91 05       	cpc	r25, r1
 344:	cc f7       	brge	.-14     	; 0x338 <main+0x25c>
 346:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <j+0x1>
 34a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <j>
 34e:	02 c0       	rjmp	.+4      	; 0x354 <main+0x278>
 350:	00 e0       	ldi	r16, 0x00	; 0
 352:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = j + 48; //100s, hundreds
 354:	00 5d       	subi	r16, 0xD0	; 208
 356:	0c b9       	out	0x0c, r16	; 12
 358:	af e3       	ldi	r26, 0x3F	; 63
 35a:	bc e9       	ldi	r27, 0x9C	; 156
 35c:	11 97       	sbiw	r26, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <main+0x280>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x286>
 362:	00 00       	nop
			_delay_ms(10);
			
			for(k = 0; read - i*1000 - j*100 - k*10 >= 10; k++);
 364:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <k+0x1>
 368:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <k>
 36c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <i>
 370:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <i+0x1>
 374:	82 9f       	mul	r24, r18
 376:	80 01       	movw	r16, r0
 378:	83 9f       	mul	r24, r19
 37a:	10 0d       	add	r17, r0
 37c:	92 9f       	mul	r25, r18
 37e:	10 0d       	add	r17, r0
 380:	11 24       	eor	r1, r1
 382:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <read>
 386:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <read+0x1>
 38a:	08 0f       	add	r16, r24
 38c:	19 1f       	adc	r17, r25
 38e:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <j>
 392:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <j+0x1>
 396:	6f 2d       	mov	r22, r15
 398:	a6 01       	movw	r20, r12
 39a:	64 03       	mulsu	r22, r20
 39c:	c0 01       	movw	r24, r0
 39e:	65 9f       	mul	r22, r21
 3a0:	90 0d       	add	r25, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	80 0f       	add	r24, r16
 3a6:	91 1f       	adc	r25, r17
 3a8:	8a 30       	cpi	r24, 0x0A	; 10
 3aa:	91 05       	cpc	r25, r1
 3ac:	6c f0       	brlt	.+26     	; 0x3c8 <main+0x2ec>
 3ae:	00 e0       	ldi	r16, 0x00	; 0
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	0a 97       	sbiw	r24, 0x0a	; 10
 3b8:	8a 30       	cpi	r24, 0x0A	; 10
 3ba:	91 05       	cpc	r25, r1
 3bc:	d4 f7       	brge	.-12     	; 0x3b2 <main+0x2d6>
 3be:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <k+0x1>
 3c2:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <k>
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <main+0x2f0>
 3c8:	00 e0       	ldi	r16, 0x00	; 0
 3ca:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = k + 48; //10s, tens
 3cc:	00 5d       	subi	r16, 0xD0	; 208
 3ce:	0c b9       	out	0x0c, r16	; 12
 3d0:	8f e3       	ldi	r24, 0x3F	; 63
 3d2:	9c e9       	ldi	r25, 0x9C	; 156
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x2f8>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x2fe>
 3da:	00 00       	nop
			_delay_ms(10);
			
			UDR0 = read - i*1000 - j*100 - k*10 + 48; //1s, units
 3dc:	a8 e0       	ldi	r26, 0x08	; 8
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	9c 91       	ld	r25, X
 3e2:	aa e0       	ldi	r26, 0x0A	; 10
 3e4:	b1 e0       	ldi	r27, 0x01	; 1
 3e6:	8c 91       	ld	r24, X
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	9a 9d       	mul	r25, r10
 3ec:	80 0d       	add	r24, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	98 81       	ld	r25, Y
 3f2:	9f 9d       	mul	r25, r15
 3f4:	80 0d       	add	r24, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	a6 e0       	ldi	r26, 0x06	; 6
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	9c 91       	ld	r25, X
 3fe:	99 0f       	add	r25, r25
 400:	19 2f       	mov	r17, r25
 402:	11 0f       	add	r17, r17
 404:	11 0f       	add	r17, r17
 406:	91 0f       	add	r25, r17
 408:	89 1b       	sub	r24, r25
 40a:	8c b9       	out	0x0c, r24	; 12
 40c:	8f e3       	ldi	r24, 0x3F	; 63
 40e:	9c e9       	ldi	r25, 0x9C	; 156
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
			_delay_ms(10);
		}
		if (adc_select == 3) adc_select = 0;
 418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 41c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	91 05       	cpc	r25, r1
 424:	29 f4       	brne	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 42a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 42e:	a2 ce       	rjmp	.-700    	; 0x174 <main+0x98>
		else adc_select++;
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 436:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 43a:	9c ce       	rjmp	.-712    	; 0x174 <main+0x98>

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
